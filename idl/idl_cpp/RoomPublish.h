// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RoomPublish.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ROOMPUBLISH_H_
#define _ROOMPUBLISH_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RoomPublish_SOURCE)
#define RoomPublish_DllAPI __declspec( dllexport )
#else
#define RoomPublish_DllAPI __declspec( dllimport )
#endif // RoomPublish_SOURCE
#else
#define RoomPublish_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define RoomPublish_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Position defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class Position
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Position();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Position();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position(
            const Position& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position(
            Position&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position& operator =(
            const Position& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Position that will be copied.
     */
    eProsima_user_DllExport Position& operator =(
            Position&& x);

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Position& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
};
/*!
 * @brief This class represents the structure Contour defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class Contour
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Contour();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Contour();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Contour that will be copied.
     */
    eProsima_user_DllExport Contour(
            const Contour& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Contour that will be copied.
     */
    eProsima_user_DllExport Contour(
            Contour&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Contour that will be copied.
     */
    eProsima_user_DllExport Contour& operator =(
            const Contour& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Contour that will be copied.
     */
    eProsima_user_DllExport Contour& operator =(
            Contour&& x);

    /*!
     * @brief This function copies the value in member contour_point
     * @param _contour_point New value to be copied in member contour_point
     */
    eProsima_user_DllExport void contour_point(
            const std::array<Position, 32>& _contour_point);

    /*!
     * @brief This function moves the value in member contour_point
     * @param _contour_point New value to be moved in member contour_point
     */
    eProsima_user_DllExport void contour_point(
            std::array<Position, 32>&& _contour_point);

    /*!
     * @brief This function returns a constant reference to member contour_point
     * @return Constant reference to member contour_point
     */
    eProsima_user_DllExport const std::array<Position, 32>& contour_point() const;

    /*!
     * @brief This function returns a reference to member contour_point
     * @return Reference to member contour_point
     */
    eProsima_user_DllExport std::array<Position, 32>& contour_point();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Contour& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::array<Position, 32> m_contour_point;
};
/*!
 * @brief This class represents the structure OneRoom defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class OneRoom
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OneRoom();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OneRoom();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OneRoom that will be copied.
     */
    eProsima_user_DllExport OneRoom(
            const OneRoom& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OneRoom that will be copied.
     */
    eProsima_user_DllExport OneRoom(
            OneRoom&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OneRoom that will be copied.
     */
    eProsima_user_DllExport OneRoom& operator =(
            const OneRoom& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OneRoom that will be copied.
     */
    eProsima_user_DllExport OneRoom& operator =(
            OneRoom&& x);

    /*!
     * @brief This function sets a value in member room_id
     * @param _room_id New value for member room_id
     */
    eProsima_user_DllExport void room_id(
            int32_t _room_id);

    /*!
     * @brief This function returns the value of member room_id
     * @return Value of member room_id
     */
    eProsima_user_DllExport int32_t room_id() const;

    /*!
     * @brief This function returns a reference to member room_id
     * @return Reference to member room_id
     */
    eProsima_user_DllExport int32_t& room_id();

    /*!
     * @brief This function copies the value in member room_centre
     * @param _room_centre New value to be copied in member room_centre
     */
    eProsima_user_DllExport void room_centre(
            const Position& _room_centre);

    /*!
     * @brief This function moves the value in member room_centre
     * @param _room_centre New value to be moved in member room_centre
     */
    eProsima_user_DllExport void room_centre(
            Position&& _room_centre);

    /*!
     * @brief This function returns a constant reference to member room_centre
     * @return Constant reference to member room_centre
     */
    eProsima_user_DllExport const Position& room_centre() const;

    /*!
     * @brief This function returns a reference to member room_centre
     * @return Reference to member room_centre
     */
    eProsima_user_DllExport Position& room_centre();
    /*!
     * @brief This function sets a value in member room_area
     * @param _room_area New value for member room_area
     */
    eProsima_user_DllExport void room_area(
            double _room_area);

    /*!
     * @brief This function returns the value of member room_area
     * @return Value of member room_area
     */
    eProsima_user_DllExport double room_area() const;

    /*!
     * @brief This function returns a reference to member room_area
     * @return Reference to member room_area
     */
    eProsima_user_DllExport double& room_area();

    /*!
     * @brief This function sets a value in member clean_num
     * @param _clean_num New value for member clean_num
     */
    eProsima_user_DllExport void clean_num(
            int32_t _clean_num);

    /*!
     * @brief This function returns the value of member clean_num
     * @return Value of member clean_num
     */
    eProsima_user_DllExport int32_t clean_num() const;

    /*!
     * @brief This function returns a reference to member clean_num
     * @return Reference to member clean_num
     */
    eProsima_user_DllExport int32_t& clean_num();

    /*!
     * @brief This function sets a value in member forbid
     * @param _forbid New value for member forbid
     */
    eProsima_user_DllExport void forbid(
            bool _forbid);

    /*!
     * @brief This function returns the value of member forbid
     * @return Value of member forbid
     */
    eProsima_user_DllExport bool forbid() const;

    /*!
     * @brief This function returns a reference to member forbid
     * @return Reference to member forbid
     */
    eProsima_user_DllExport bool& forbid();

    /*!
     * @brief This function copies the value in member room_points
     * @param _room_points New value to be copied in member room_points
     */
    eProsima_user_DllExport void room_points(
            const Contour& _room_points);

    /*!
     * @brief This function moves the value in member room_points
     * @param _room_points New value to be moved in member room_points
     */
    eProsima_user_DllExport void room_points(
            Contour&& _room_points);

    /*!
     * @brief This function returns a constant reference to member room_points
     * @return Constant reference to member room_points
     */
    eProsima_user_DllExport const Contour& room_points() const;

    /*!
     * @brief This function returns a reference to member room_points
     * @return Reference to member room_points
     */
    eProsima_user_DllExport Contour& room_points();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const OneRoom& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_room_id;
    Position m_room_centre;
    double m_room_area;
    int32_t m_clean_num;
    bool m_forbid;
    Contour m_room_points;
};
/*!
 * @brief This class represents the structure RoomPublish defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RoomPublish
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RoomPublish();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RoomPublish();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RoomPublish that will be copied.
     */
    eProsima_user_DllExport RoomPublish(
            const RoomPublish& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RoomPublish that will be copied.
     */
    eProsima_user_DllExport RoomPublish(
            RoomPublish&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RoomPublish that will be copied.
     */
    eProsima_user_DllExport RoomPublish& operator =(
            const RoomPublish& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RoomPublish that will be copied.
     */
    eProsima_user_DllExport RoomPublish& operator =(
            RoomPublish&& x);

    /*!
     * @brief This function sets a value in member room_num
     * @param _room_num New value for member room_num
     */
    eProsima_user_DllExport void room_num(
            int32_t _room_num);

    /*!
     * @brief This function returns the value of member room_num
     * @return Value of member room_num
     */
    eProsima_user_DllExport int32_t room_num() const;

    /*!
     * @brief This function returns a reference to member room_num
     * @return Reference to member room_num
     */
    eProsima_user_DllExport int32_t& room_num();

    /*!
     * @brief This function copies the value in member room_info
     * @param _room_info New value to be copied in member room_info
     */
    eProsima_user_DllExport void room_info(
            const std::vector<OneRoom>& _room_info);

    /*!
     * @brief This function moves the value in member room_info
     * @param _room_info New value to be moved in member room_info
     */
    eProsima_user_DllExport void room_info(
            std::vector<OneRoom>&& _room_info);

    /*!
     * @brief This function returns a constant reference to member room_info
     * @return Constant reference to member room_info
     */
    eProsima_user_DllExport const std::vector<OneRoom>& room_info() const;

    /*!
     * @brief This function returns a reference to member room_info
     * @return Reference to member room_info
     */
    eProsima_user_DllExport std::vector<OneRoom>& room_info();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RoomPublish& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_room_num;
    std::vector<OneRoom> m_room_info;
};
/*!
 * @brief This class represents the structure Param defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class Param
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Param();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Param();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Param that will be copied.
     */
    eProsima_user_DllExport Param(
            const Param& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Param that will be copied.
     */
    eProsima_user_DllExport Param(
            Param&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Param that will be copied.
     */
    eProsima_user_DllExport Param& operator =(
            const Param& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Param that will be copied.
     */
    eProsima_user_DllExport Param& operator =(
            Param&& x);

    /*!
     * @brief This function sets a value in member param1
     * @param _param1 New value for member param1
     */
    eProsima_user_DllExport void param1(
            double _param1);

    /*!
     * @brief This function returns the value of member param1
     * @return Value of member param1
     */
    eProsima_user_DllExport double param1() const;

    /*!
     * @brief This function returns a reference to member param1
     * @return Reference to member param1
     */
    eProsima_user_DllExport double& param1();

    /*!
     * @brief This function sets a value in member param2
     * @param _param2 New value for member param2
     */
    eProsima_user_DllExport void param2(
            double _param2);

    /*!
     * @brief This function returns the value of member param2
     * @return Value of member param2
     */
    eProsima_user_DllExport double param2() const;

    /*!
     * @brief This function returns a reference to member param2
     * @return Reference to member param2
     */
    eProsima_user_DllExport double& param2();

    /*!
     * @brief This function sets a value in member param3
     * @param _param3 New value for member param3
     */
    eProsima_user_DllExport void param3(
            int32_t _param3);

    /*!
     * @brief This function returns the value of member param3
     * @return Value of member param3
     */
    eProsima_user_DllExport int32_t param3() const;

    /*!
     * @brief This function returns a reference to member param3
     * @return Reference to member param3
     */
    eProsima_user_DllExport int32_t& param3();

    /*!
     * @brief This function sets a value in member param4
     * @param _param4 New value for member param4
     */
    eProsima_user_DllExport void param4(
            int32_t _param4);

    /*!
     * @brief This function returns the value of member param4
     * @return Value of member param4
     */
    eProsima_user_DllExport int32_t param4() const;

    /*!
     * @brief This function returns a reference to member param4
     * @return Reference to member param4
     */
    eProsima_user_DllExport int32_t& param4();

    /*!
     * @brief This function sets a value in member param5
     * @param _param5 New value for member param5
     */
    eProsima_user_DllExport void param5(
            double _param5);

    /*!
     * @brief This function returns the value of member param5
     * @return Value of member param5
     */
    eProsima_user_DllExport double param5() const;

    /*!
     * @brief This function returns a reference to member param5
     * @return Reference to member param5
     */
    eProsima_user_DllExport double& param5();

    /*!
     * @brief This function sets a value in member param6
     * @param _param6 New value for member param6
     */
    eProsima_user_DllExport void param6(
            double _param6);

    /*!
     * @brief This function returns the value of member param6
     * @return Value of member param6
     */
    eProsima_user_DllExport double param6() const;

    /*!
     * @brief This function returns a reference to member param6
     * @return Reference to member param6
     */
    eProsima_user_DllExport double& param6();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Param& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_param1;
    double m_param2;
    int32_t m_param3;
    int32_t m_param4;
    double m_param5;
    double m_param6;
};
/*!
 * @brief This class represents the structure SaveMap defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class SaveMap
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SaveMap();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SaveMap();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SaveMap that will be copied.
     */
    eProsima_user_DllExport SaveMap(
            const SaveMap& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SaveMap that will be copied.
     */
    eProsima_user_DllExport SaveMap(
            SaveMap&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SaveMap that will be copied.
     */
    eProsima_user_DllExport SaveMap& operator =(
            const SaveMap& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SaveMap that will be copied.
     */
    eProsima_user_DllExport SaveMap& operator =(
            SaveMap&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const SaveMap& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
};
/*!
 * @brief This class represents the structure RoomOptimize defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RoomOptimize
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RoomOptimize();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RoomOptimize();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RoomOptimize that will be copied.
     */
    eProsima_user_DllExport RoomOptimize(
            const RoomOptimize& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RoomOptimize that will be copied.
     */
    eProsima_user_DllExport RoomOptimize(
            RoomOptimize&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RoomOptimize that will be copied.
     */
    eProsima_user_DllExport RoomOptimize& operator =(
            const RoomOptimize& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RoomOptimize that will be copied.
     */
    eProsima_user_DllExport RoomOptimize& operator =(
            RoomOptimize&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RoomOptimize& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
};
/*!
 * @brief This class represents the structure RoomSplit defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RoomSplit
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RoomSplit();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RoomSplit();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RoomSplit that will be copied.
     */
    eProsima_user_DllExport RoomSplit(
            const RoomSplit& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RoomSplit that will be copied.
     */
    eProsima_user_DllExport RoomSplit(
            RoomSplit&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RoomSplit that will be copied.
     */
    eProsima_user_DllExport RoomSplit& operator =(
            const RoomSplit& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RoomSplit that will be copied.
     */
    eProsima_user_DllExport RoomSplit& operator =(
            RoomSplit&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();

    /*!
     * @brief This function copies the value in member split_param
     * @param _split_param New value to be copied in member split_param
     */
    eProsima_user_DllExport void split_param(
            const Param& _split_param);

    /*!
     * @brief This function moves the value in member split_param
     * @param _split_param New value to be moved in member split_param
     */
    eProsima_user_DllExport void split_param(
            Param&& _split_param);

    /*!
     * @brief This function returns a constant reference to member split_param
     * @return Constant reference to member split_param
     */
    eProsima_user_DllExport const Param& split_param() const;

    /*!
     * @brief This function returns a reference to member split_param
     * @return Reference to member split_param
     */
    eProsima_user_DllExport Param& split_param();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RoomSplit& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
    Param m_split_param;
};
/*!
 * @brief This class represents the structure VisualWall defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class VisualWall
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VisualWall();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VisualWall();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VisualWall that will be copied.
     */
    eProsima_user_DllExport VisualWall(
            const VisualWall& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VisualWall that will be copied.
     */
    eProsima_user_DllExport VisualWall(
            VisualWall&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VisualWall that will be copied.
     */
    eProsima_user_DllExport VisualWall& operator =(
            const VisualWall& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VisualWall that will be copied.
     */
    eProsima_user_DllExport VisualWall& operator =(
            VisualWall&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();

    /*!
     * @brief This function copies the value in member point
     * @param _point New value to be copied in member point
     */
    eProsima_user_DllExport void point(
            const std::array<Position, 2>& _point);

    /*!
     * @brief This function moves the value in member point
     * @param _point New value to be moved in member point
     */
    eProsima_user_DllExport void point(
            std::array<Position, 2>&& _point);

    /*!
     * @brief This function returns a constant reference to member point
     * @return Constant reference to member point
     */
    eProsima_user_DllExport const std::array<Position, 2>& point() const;

    /*!
     * @brief This function returns a reference to member point
     * @return Reference to member point
     */
    eProsima_user_DllExport std::array<Position, 2>& point();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const VisualWall& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
    std::array<Position, 2> m_point;
};
/*!
 * @brief This class represents the structure ForbidArea defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class ForbidArea
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ForbidArea();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ForbidArea();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ForbidArea that will be copied.
     */
    eProsima_user_DllExport ForbidArea(
            const ForbidArea& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ForbidArea that will be copied.
     */
    eProsima_user_DllExport ForbidArea(
            ForbidArea&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ForbidArea that will be copied.
     */
    eProsima_user_DllExport ForbidArea& operator =(
            const ForbidArea& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ForbidArea that will be copied.
     */
    eProsima_user_DllExport ForbidArea& operator =(
            ForbidArea&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();

    /*!
     * @brief This function copies the value in member point
     * @param _point New value to be copied in member point
     */
    eProsima_user_DllExport void point(
            const Position& _point);

    /*!
     * @brief This function moves the value in member point
     * @param _point New value to be moved in member point
     */
    eProsima_user_DllExport void point(
            Position&& _point);

    /*!
     * @brief This function returns a constant reference to member point
     * @return Constant reference to member point
     */
    eProsima_user_DllExport const Position& point() const;

    /*!
     * @brief This function returns a reference to member point
     * @return Reference to member point
     */
    eProsima_user_DllExport Position& point();
    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            double _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport double width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport double& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            double _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport double height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport double& height();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ForbidArea& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
    Position m_point;
    double m_width;
    double m_height;
};
/*!
 * @brief This class represents the structure RoomMerge defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RoomMerge
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RoomMerge();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RoomMerge();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RoomMerge that will be copied.
     */
    eProsima_user_DllExport RoomMerge(
            const RoomMerge& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RoomMerge that will be copied.
     */
    eProsima_user_DllExport RoomMerge(
            RoomMerge&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RoomMerge that will be copied.
     */
    eProsima_user_DllExport RoomMerge& operator =(
            const RoomMerge& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RoomMerge that will be copied.
     */
    eProsima_user_DllExport RoomMerge& operator =(
            RoomMerge&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();

    /*!
     * @brief This function sets a value in member room_num1
     * @param _room_num1 New value for member room_num1
     */
    eProsima_user_DllExport void room_num1(
            int32_t _room_num1);

    /*!
     * @brief This function returns the value of member room_num1
     * @return Value of member room_num1
     */
    eProsima_user_DllExport int32_t room_num1() const;

    /*!
     * @brief This function returns a reference to member room_num1
     * @return Reference to member room_num1
     */
    eProsima_user_DllExport int32_t& room_num1();

    /*!
     * @brief This function sets a value in member room_num2
     * @param _room_num2 New value for member room_num2
     */
    eProsima_user_DllExport void room_num2(
            int32_t _room_num2);

    /*!
     * @brief This function returns the value of member room_num2
     * @return Value of member room_num2
     */
    eProsima_user_DllExport int32_t room_num2() const;

    /*!
     * @brief This function returns a reference to member room_num2
     * @return Reference to member room_num2
     */
    eProsima_user_DllExport int32_t& room_num2();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RoomMerge& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
    int32_t m_room_num1;
    int32_t m_room_num2;
};
/*!
 * @brief This class represents the structure RoomInfo defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RoomInfo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RoomInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RoomInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RoomInfo that will be copied.
     */
    eProsima_user_DllExport RoomInfo(
            const RoomInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RoomInfo that will be copied.
     */
    eProsima_user_DllExport RoomInfo(
            RoomInfo&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RoomInfo that will be copied.
     */
    eProsima_user_DllExport RoomInfo& operator =(
            const RoomInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RoomInfo that will be copied.
     */
    eProsima_user_DllExport RoomInfo& operator =(
            RoomInfo&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RoomInfo& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
};
/*!
 * @brief This class represents the structure RemoveMap defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class RemoveMap
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RemoveMap();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RemoveMap();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RemoveMap that will be copied.
     */
    eProsima_user_DllExport RemoveMap(
            const RemoveMap& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RemoveMap that will be copied.
     */
    eProsima_user_DllExport RemoveMap(
            RemoveMap&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RemoveMap that will be copied.
     */
    eProsima_user_DllExport RemoveMap& operator =(
            const RemoveMap& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RemoveMap that will be copied.
     */
    eProsima_user_DllExport RemoveMap& operator =(
            RemoveMap&& x);

    /*!
     * @brief This function sets a value in member flag
     * @param _flag New value for member flag
     */
    eProsima_user_DllExport void flag(
            bool _flag);

    /*!
     * @brief This function returns the value of member flag
     * @return Value of member flag
     */
    eProsima_user_DllExport bool flag() const;

    /*!
     * @brief This function returns a reference to member flag
     * @return Reference to member flag
     */
    eProsima_user_DllExport bool& flag();

    /*!
     * @brief This function sets a value in member mapid
     * @param _mapid New value for member mapid
     */
    eProsima_user_DllExport void mapid(
            int32_t _mapid);

    /*!
     * @brief This function returns the value of member mapid
     * @return Value of member mapid
     */
    eProsima_user_DllExport int32_t mapid() const;

    /*!
     * @brief This function returns a reference to member mapid
     * @return Reference to member mapid
     */
    eProsima_user_DllExport int32_t& mapid();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const RemoveMap& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_flag;
    int32_t m_mapid;
};
/*!
 * @brief This class represents the structure FunctionOrder defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class FunctionOrder
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FunctionOrder();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FunctionOrder();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FunctionOrder that will be copied.
     */
    eProsima_user_DllExport FunctionOrder(
            const FunctionOrder& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FunctionOrder that will be copied.
     */
    eProsima_user_DllExport FunctionOrder(
            FunctionOrder&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FunctionOrder that will be copied.
     */
    eProsima_user_DllExport FunctionOrder& operator =(
            const FunctionOrder& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FunctionOrder that will be copied.
     */
    eProsima_user_DllExport FunctionOrder& operator =(
            FunctionOrder&& x);

    /*!
     * @brief This function copies the value in member set_savemap
     * @param _set_savemap New value to be copied in member set_savemap
     */
    eProsima_user_DllExport void set_savemap(
            const SaveMap& _set_savemap);

    /*!
     * @brief This function moves the value in member set_savemap
     * @param _set_savemap New value to be moved in member set_savemap
     */
    eProsima_user_DllExport void set_savemap(
            SaveMap&& _set_savemap);

    /*!
     * @brief This function returns a constant reference to member set_savemap
     * @return Constant reference to member set_savemap
     */
    eProsima_user_DllExport const SaveMap& set_savemap() const;

    /*!
     * @brief This function returns a reference to member set_savemap
     * @return Reference to member set_savemap
     */
    eProsima_user_DllExport SaveMap& set_savemap();
    /*!
     * @brief This function copies the value in member set_removemap
     * @param _set_removemap New value to be copied in member set_removemap
     */
    eProsima_user_DllExport void set_removemap(
            const RemoveMap& _set_removemap);

    /*!
     * @brief This function moves the value in member set_removemap
     * @param _set_removemap New value to be moved in member set_removemap
     */
    eProsima_user_DllExport void set_removemap(
            RemoveMap&& _set_removemap);

    /*!
     * @brief This function returns a constant reference to member set_removemap
     * @return Constant reference to member set_removemap
     */
    eProsima_user_DllExport const RemoveMap& set_removemap() const;

    /*!
     * @brief This function returns a reference to member set_removemap
     * @return Reference to member set_removemap
     */
    eProsima_user_DllExport RemoveMap& set_removemap();
    /*!
     * @brief This function copies the value in member set_optimize
     * @param _set_optimize New value to be copied in member set_optimize
     */
    eProsima_user_DllExport void set_optimize(
            const RoomOptimize& _set_optimize);

    /*!
     * @brief This function moves the value in member set_optimize
     * @param _set_optimize New value to be moved in member set_optimize
     */
    eProsima_user_DllExport void set_optimize(
            RoomOptimize&& _set_optimize);

    /*!
     * @brief This function returns a constant reference to member set_optimize
     * @return Constant reference to member set_optimize
     */
    eProsima_user_DllExport const RoomOptimize& set_optimize() const;

    /*!
     * @brief This function returns a reference to member set_optimize
     * @return Reference to member set_optimize
     */
    eProsima_user_DllExport RoomOptimize& set_optimize();
    /*!
     * @brief This function copies the value in member set_split
     * @param _set_split New value to be copied in member set_split
     */
    eProsima_user_DllExport void set_split(
            const RoomSplit& _set_split);

    /*!
     * @brief This function moves the value in member set_split
     * @param _set_split New value to be moved in member set_split
     */
    eProsima_user_DllExport void set_split(
            RoomSplit&& _set_split);

    /*!
     * @brief This function returns a constant reference to member set_split
     * @return Constant reference to member set_split
     */
    eProsima_user_DllExport const RoomSplit& set_split() const;

    /*!
     * @brief This function returns a reference to member set_split
     * @return Reference to member set_split
     */
    eProsima_user_DllExport RoomSplit& set_split();
    /*!
     * @brief This function copies the value in member set_wall
     * @param _set_wall New value to be copied in member set_wall
     */
    eProsima_user_DllExport void set_wall(
            const VisualWall& _set_wall);

    /*!
     * @brief This function moves the value in member set_wall
     * @param _set_wall New value to be moved in member set_wall
     */
    eProsima_user_DllExport void set_wall(
            VisualWall&& _set_wall);

    /*!
     * @brief This function returns a constant reference to member set_wall
     * @return Constant reference to member set_wall
     */
    eProsima_user_DllExport const VisualWall& set_wall() const;

    /*!
     * @brief This function returns a reference to member set_wall
     * @return Reference to member set_wall
     */
    eProsima_user_DllExport VisualWall& set_wall();
    /*!
     * @brief This function copies the value in member set_area
     * @param _set_area New value to be copied in member set_area
     */
    eProsima_user_DllExport void set_area(
            const ForbidArea& _set_area);

    /*!
     * @brief This function moves the value in member set_area
     * @param _set_area New value to be moved in member set_area
     */
    eProsima_user_DllExport void set_area(
            ForbidArea&& _set_area);

    /*!
     * @brief This function returns a constant reference to member set_area
     * @return Constant reference to member set_area
     */
    eProsima_user_DllExport const ForbidArea& set_area() const;

    /*!
     * @brief This function returns a reference to member set_area
     * @return Reference to member set_area
     */
    eProsima_user_DllExport ForbidArea& set_area();
    /*!
     * @brief This function copies the value in member set_merge
     * @param _set_merge New value to be copied in member set_merge
     */
    eProsima_user_DllExport void set_merge(
            const RoomMerge& _set_merge);

    /*!
     * @brief This function moves the value in member set_merge
     * @param _set_merge New value to be moved in member set_merge
     */
    eProsima_user_DllExport void set_merge(
            RoomMerge&& _set_merge);

    /*!
     * @brief This function returns a constant reference to member set_merge
     * @return Constant reference to member set_merge
     */
    eProsima_user_DllExport const RoomMerge& set_merge() const;

    /*!
     * @brief This function returns a reference to member set_merge
     * @return Reference to member set_merge
     */
    eProsima_user_DllExport RoomMerge& set_merge();
    /*!
     * @brief This function copies the value in member set_info
     * @param _set_info New value to be copied in member set_info
     */
    eProsima_user_DllExport void set_info(
            const RoomInfo& _set_info);

    /*!
     * @brief This function moves the value in member set_info
     * @param _set_info New value to be moved in member set_info
     */
    eProsima_user_DllExport void set_info(
            RoomInfo&& _set_info);

    /*!
     * @brief This function returns a constant reference to member set_info
     * @return Constant reference to member set_info
     */
    eProsima_user_DllExport const RoomInfo& set_info() const;

    /*!
     * @brief This function returns a reference to member set_info
     * @return Reference to member set_info
     */
    eProsima_user_DllExport RoomInfo& set_info();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FunctionOrder& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    SaveMap m_set_savemap;
    RemoveMap m_set_removemap;
    RoomOptimize m_set_optimize;
    RoomSplit m_set_split;
    VisualWall m_set_wall;
    ForbidArea m_set_area;
    RoomMerge m_set_merge;
    RoomInfo m_set_info;
};
/*!
 * @brief This class represents the structure MapColor defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class MapColor
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapColor();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapColor();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapColor that will be copied.
     */
    eProsima_user_DllExport MapColor(
            const MapColor& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapColor that will be copied.
     */
    eProsima_user_DllExport MapColor(
            MapColor&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapColor that will be copied.
     */
    eProsima_user_DllExport MapColor& operator =(
            const MapColor& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapColor that will be copied.
     */
    eProsima_user_DllExport MapColor& operator =(
            MapColor&& x);

    /*!
     * @brief This function sets a value in member color_b
     * @param _color_b New value for member color_b
     */
    eProsima_user_DllExport void color_b(
            int16_t _color_b);

    /*!
     * @brief This function returns the value of member color_b
     * @return Value of member color_b
     */
    eProsima_user_DllExport int16_t color_b() const;

    /*!
     * @brief This function returns a reference to member color_b
     * @return Reference to member color_b
     */
    eProsima_user_DllExport int16_t& color_b();

    /*!
     * @brief This function sets a value in member color_g
     * @param _color_g New value for member color_g
     */
    eProsima_user_DllExport void color_g(
            int16_t _color_g);

    /*!
     * @brief This function returns the value of member color_g
     * @return Value of member color_g
     */
    eProsima_user_DllExport int16_t color_g() const;

    /*!
     * @brief This function returns a reference to member color_g
     * @return Reference to member color_g
     */
    eProsima_user_DllExport int16_t& color_g();

    /*!
     * @brief This function sets a value in member color_r
     * @param _color_r New value for member color_r
     */
    eProsima_user_DllExport void color_r(
            int16_t _color_r);

    /*!
     * @brief This function returns the value of member color_r
     * @return Value of member color_r
     */
    eProsima_user_DllExport int16_t color_r() const;

    /*!
     * @brief This function returns a reference to member color_r
     * @return Reference to member color_r
     */
    eProsima_user_DllExport int16_t& color_r();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MapColor& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_color_b;
    int16_t m_color_g;
    int16_t m_color_r;
};
/*!
 * @brief This class represents the structure MapServer defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class MapServer
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapServer();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapServer();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapServer that will be copied.
     */
    eProsima_user_DllExport MapServer(
            const MapServer& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapServer that will be copied.
     */
    eProsima_user_DllExport MapServer(
            MapServer&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapServer that will be copied.
     */
    eProsima_user_DllExport MapServer& operator =(
            const MapServer& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapServer that will be copied.
     */
    eProsima_user_DllExport MapServer& operator =(
            MapServer&& x);

    /*!
     * @brief This function sets a value in member channels
     * @param _channels New value for member channels
     */
    eProsima_user_DllExport void channels(
            int16_t _channels);

    /*!
     * @brief This function returns the value of member channels
     * @return Value of member channels
     */
    eProsima_user_DllExport int16_t channels() const;

    /*!
     * @brief This function returns a reference to member channels
     * @return Reference to member channels
     */
    eProsima_user_DllExport int16_t& channels();

    /*!
     * @brief This function sets a value in member rows
     * @param _rows New value for member rows
     */
    eProsima_user_DllExport void rows(
            int16_t _rows);

    /*!
     * @brief This function returns the value of member rows
     * @return Value of member rows
     */
    eProsima_user_DllExport int16_t rows() const;

    /*!
     * @brief This function returns a reference to member rows
     * @return Reference to member rows
     */
    eProsima_user_DllExport int16_t& rows();

    /*!
     * @brief This function sets a value in member cols
     * @param _cols New value for member cols
     */
    eProsima_user_DllExport void cols(
            int16_t _cols);

    /*!
     * @brief This function returns the value of member cols
     * @return Value of member cols
     */
    eProsima_user_DllExport int16_t cols() const;

    /*!
     * @brief This function returns a reference to member cols
     * @return Reference to member cols
     */
    eProsima_user_DllExport int16_t& cols();

    /*!
     * @brief This function copies the value in member point_value
     * @param _point_value New value to be copied in member point_value
     */
    eProsima_user_DllExport void point_value(
            const std::vector<MapColor>& _point_value);

    /*!
     * @brief This function moves the value in member point_value
     * @param _point_value New value to be moved in member point_value
     */
    eProsima_user_DllExport void point_value(
            std::vector<MapColor>&& _point_value);

    /*!
     * @brief This function returns a constant reference to member point_value
     * @return Constant reference to member point_value
     */
    eProsima_user_DllExport const std::vector<MapColor>& point_value() const;

    /*!
     * @brief This function returns a reference to member point_value
     * @return Reference to member point_value
     */
    eProsima_user_DllExport std::vector<MapColor>& point_value();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MapServer& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_channels;
    int16_t m_rows;
    int16_t m_cols;
    std::vector<MapColor> m_point_value;
};
/*!
 * @brief This class represents the structure MapModify defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class MapModify
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapModify();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapModify();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapModify that will be copied.
     */
    eProsima_user_DllExport MapModify(
            const MapModify& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapModify that will be copied.
     */
    eProsima_user_DllExport MapModify(
            MapModify&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapModify that will be copied.
     */
    eProsima_user_DllExport MapModify& operator =(
            const MapModify& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapModify that will be copied.
     */
    eProsima_user_DllExport MapModify& operator =(
            MapModify&& x);

    /*!
     * @brief This function sets a value in member mapid
     * @param _mapid New value for member mapid
     */
    eProsima_user_DllExport void mapid(
            int32_t _mapid);

    /*!
     * @brief This function returns the value of member mapid
     * @return Value of member mapid
     */
    eProsima_user_DllExport int32_t mapid() const;

    /*!
     * @brief This function returns a reference to member mapid
     * @return Reference to member mapid
     */
    eProsima_user_DllExport int32_t& mapid();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MapModify& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_mapid;
};
/*!
 * @brief This class represents the structure Message defined by the user in the IDL file.
 * @ingroup ROOMPUBLISH
 */
class Message
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Message();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Message();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message(
            const Message& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message(
            Message&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message& operator =(
            const Message& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message& operator =(
            Message&& x);

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Message& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_index;
    std::string m_message;
};

#endif // _ROOMPUBLISH_H_