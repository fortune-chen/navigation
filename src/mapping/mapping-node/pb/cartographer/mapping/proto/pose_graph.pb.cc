// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph.proto

#include "cartographer/mapping/proto/pose_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr SubmapId::SubmapId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_id_(0)
  , submap_index_(0){}
struct SubmapIdDefaultTypeInternal {
  constexpr SubmapIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubmapIdDefaultTypeInternal() {}
  union {
    SubmapId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubmapIdDefaultTypeInternal _SubmapId_default_instance_;
constexpr NodeId::NodeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_id_(0)
  , node_index_(0){}
struct NodeIdDefaultTypeInternal {
  constexpr NodeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeIdDefaultTypeInternal() {}
  union {
    NodeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeIdDefaultTypeInternal _NodeId_default_instance_;
constexpr PoseGraph_Constraint::PoseGraph_Constraint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : submap_id_(nullptr)
  , node_id_(nullptr)
  , relative_pose_(nullptr)
  , translation_weight_(0)
  , rotation_weight_(0)
  , tag_(0)
{}
struct PoseGraph_ConstraintDefaultTypeInternal {
  constexpr PoseGraph_ConstraintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseGraph_ConstraintDefaultTypeInternal() {}
  union {
    PoseGraph_Constraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseGraph_ConstraintDefaultTypeInternal _PoseGraph_Constraint_default_instance_;
constexpr PoseGraph_LandmarkPose::PoseGraph_LandmarkPose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : landmark_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , global_pose_(nullptr){}
struct PoseGraph_LandmarkPoseDefaultTypeInternal {
  constexpr PoseGraph_LandmarkPoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseGraph_LandmarkPoseDefaultTypeInternal() {}
  union {
    PoseGraph_LandmarkPose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseGraph_LandmarkPoseDefaultTypeInternal _PoseGraph_LandmarkPose_default_instance_;
constexpr PoseGraph::PoseGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraint_()
  , trajectory_()
  , landmark_poses_(){}
struct PoseGraphDefaultTypeInternal {
  constexpr PoseGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseGraphDefaultTypeInternal() {}
  union {
    PoseGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseGraphDefaultTypeInternal _PoseGraph_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, submap_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, node_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, submap_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, node_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, relative_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, landmark_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, global_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, constraint_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, trajectory_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, landmark_poses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::SubmapId)},
  { 8, -1, -1, sizeof(::cartographer::mapping::proto::NodeId)},
  { 16, -1, -1, sizeof(::cartographer::mapping::proto::PoseGraph_Constraint)},
  { 28, -1, -1, sizeof(::cartographer::mapping::proto::PoseGraph_LandmarkPose)},
  { 36, -1, -1, sizeof(::cartographer::mapping::proto::PoseGraph)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_SubmapId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_NodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseGraph_LandmarkPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseGraph_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+cartographer/mapping/proto/pose_graph."
  "proto\022\032cartographer.mapping.proto\032+carto"
  "grapher/mapping/proto/trajectory.proto\032,"
  "cartographer/transform/proto/transform.p"
  "roto\"7\n\010SubmapId\022\025\n\rtrajectory_id\030\001 \001(\005\022"
  "\024\n\014submap_index\030\002 \001(\005\"3\n\006NodeId\022\025\n\rtraje"
  "ctory_id\030\001 \001(\005\022\022\n\nnode_index\030\002 \001(\005\"\230\005\n\tP"
  "oseGraph\022D\n\nconstraint\030\002 \003(\01320.cartograp"
  "her.mapping.proto.PoseGraph.Constraint\022:"
  "\n\ntrajectory\030\004 \003(\0132&.cartographer.mappin"
  "g.proto.Trajectory\022J\n\016landmark_poses\030\005 \003"
  "(\01322.cartographer.mapping.proto.PoseGrap"
  "h.LandmarkPose\032\333\002\n\nConstraint\0227\n\tsubmap_"
  "id\030\001 \001(\0132$.cartographer.mapping.proto.Su"
  "bmapId\0223\n\007node_id\030\002 \001(\0132\".cartographer.m"
  "apping.proto.NodeId\022<\n\rrelative_pose\030\003 \001"
  "(\0132%.cartographer.transform.proto.Rigid3"
  "d\022\032\n\022translation_weight\030\006 \001(\001\022\027\n\017rotatio"
  "n_weight\030\007 \001(\001\022A\n\003tag\030\005 \001(\01624.cartograph"
  "er.mapping.proto.PoseGraph.Constraint.Ta"
  "g\")\n\003Tag\022\020\n\014INTRA_SUBMAP\020\000\022\020\n\014INTER_SUBM"
  "AP\020\001\032_\n\014LandmarkPose\022\023\n\013landmark_id\030\001 \001("
  "\t\022:\n\013global_pose\030\002 \001(\0132%.cartographer.tr"
  "ansform.proto.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = {
  false, false, 949, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, "cartographer/mapping/proto/pose_graph.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoseGraph_Constraint_Tag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[0];
}
bool PoseGraph_Constraint_Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint::INTRA_SUBMAP;
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint::INTER_SUBMAP;
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MIN;
constexpr PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MAX;
constexpr int PoseGraph_Constraint::Tag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SubmapId::_Internal {
 public:
};

SubmapId::SubmapId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.SubmapId)
}
SubmapId::SubmapId(const SubmapId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&submap_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapId)
}

void SubmapId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trajectory_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&submap_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
}

SubmapId::~SubmapId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubmapId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubmapId::ArenaDtor(void* object) {
  SubmapId* _this = reinterpret_cast< SubmapId* >(object);
  (void)_this;
}
void SubmapId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmapId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubmapId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmapId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 submap_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          submap_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmapId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_submap_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapId)
  return target;
}

size_t SubmapId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trajectory_id());
  }

  // int32 submap_index = 2;
  if (this->_internal_submap_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_submap_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmapId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubmapId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmapId::GetClassData() const { return &_class_data_; }

void SubmapId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubmapId *>(to)->MergeFrom(
      static_cast<const SubmapId &>(from));
}


void SubmapId::MergeFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
  if (from._internal_submap_index() != 0) {
    _internal_set_submap_index(from._internal_submap_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmapId::CopyFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapId::IsInitialized() const {
  return true;
}

void SubmapId::InternalSwap(SubmapId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmapId, submap_index_)
      + sizeof(SubmapId::submap_index_)
      - PROTOBUF_FIELD_OFFSET(SubmapId, trajectory_id_)>(
          reinterpret_cast<char*>(&trajectory_id_),
          reinterpret_cast<char*>(&other->trajectory_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmapId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[0]);
}

// ===================================================================

class NodeId::_Internal {
 public:
};

NodeId::NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.NodeId)
}
NodeId::NodeId(const NodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.NodeId)
}

void NodeId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trajectory_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
}

NodeId::~NodeId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.NodeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeId::ArenaDtor(void* object) {
  NodeId* _this = reinterpret_cast< NodeId* >(object);
  (void)_this;
}
void NodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trajectory_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trajectory_id(), target);
  }

  // int32 node_index = 2;
  if (this->_internal_node_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_node_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.NodeId)
  return target;
}

size_t NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.NodeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->_internal_trajectory_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trajectory_id());
  }

  // int32 node_index = 2;
  if (this->_internal_node_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_node_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeId::GetClassData() const { return &_class_data_; }

void NodeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeId *>(to)->MergeFrom(
      static_cast<const NodeId &>(from));
}


void NodeId::MergeFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trajectory_id() != 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
  if (from._internal_node_index() != 0) {
    _internal_set_node_index(from._internal_node_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeId::CopyFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeId::IsInitialized() const {
  return true;
}

void NodeId::InternalSwap(NodeId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeId, node_index_)
      + sizeof(NodeId::node_index_)
      - PROTOBUF_FIELD_OFFSET(NodeId, trajectory_id_)>(
          reinterpret_cast<char*>(&trajectory_id_),
          reinterpret_cast<char*>(&other->trajectory_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[1]);
}

// ===================================================================

class PoseGraph_Constraint::_Internal {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const PoseGraph_Constraint* msg);
  static const ::cartographer::mapping::proto::NodeId& node_id(const PoseGraph_Constraint* msg);
  static const ::cartographer::transform::proto::Rigid3d& relative_pose(const PoseGraph_Constraint* msg);
};

const ::cartographer::mapping::proto::SubmapId&
PoseGraph_Constraint::_Internal::submap_id(const PoseGraph_Constraint* msg) {
  return *msg->submap_id_;
}
const ::cartographer::mapping::proto::NodeId&
PoseGraph_Constraint::_Internal::node_id(const PoseGraph_Constraint* msg) {
  return *msg->node_id_;
}
const ::cartographer::transform::proto::Rigid3d&
PoseGraph_Constraint::_Internal::relative_pose(const PoseGraph_Constraint* msg) {
  return *msg->relative_pose_;
}
void PoseGraph_Constraint::clear_relative_pose() {
  if (GetArenaForAllocation() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
}
PoseGraph_Constraint::PoseGraph_Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}
PoseGraph_Constraint::PoseGraph_Constraint(const PoseGraph_Constraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  if (from._internal_has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_relative_pose()) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = nullptr;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}

void PoseGraph_Constraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&submap_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&submap_id_)) + sizeof(tag_));
}

PoseGraph_Constraint::~PoseGraph_Constraint() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.Constraint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseGraph_Constraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete relative_pose_;
}

void PoseGraph_Constraint::ArenaDtor(void* object) {
  PoseGraph_Constraint* _this = reinterpret_cast< PoseGraph_Constraint* >(object);
  (void)_this;
}
void PoseGraph_Constraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseGraph_Constraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseGraph_Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseGraph_Constraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.NodeId node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d relative_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tag(static_cast<::cartographer::mapping::proto::PoseGraph_Constraint_Tag>(val));
        } else
          goto handle_unusual;
        continue;
      // double translation_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rotation_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseGraph_Constraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->_internal_has_submap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submap_id(this), target, stream);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->_internal_has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node_id(this), target, stream);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->_internal_has_relative_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relative_pose(this), target, stream);
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_tag(), target);
  }

  // double translation_weight = 6;
  if (!(this->_internal_translation_weight() <= 0 && this->_internal_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_translation_weight(), target);
  }

  // double rotation_weight = 7;
  if (!(this->_internal_rotation_weight() <= 0 && this->_internal_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_rotation_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.Constraint)
  return target;
}

size_t PoseGraph_Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.Constraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->_internal_has_submap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->_internal_has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->_internal_has_relative_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_pose_);
  }

  // double translation_weight = 6;
  if (!(this->_internal_translation_weight() <= 0 && this->_internal_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 7;
  if (!(this->_internal_rotation_weight() <= 0 && this->_internal_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->_internal_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseGraph_Constraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseGraph_Constraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseGraph_Constraint::GetClassData() const { return &_class_data_; }

void PoseGraph_Constraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseGraph_Constraint *>(to)->MergeFrom(
      static_cast<const PoseGraph_Constraint &>(from));
}


void PoseGraph_Constraint::MergeFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_submap_id()) {
    _internal_mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from._internal_submap_id());
  }
  if (from._internal_has_node_id()) {
    _internal_mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from._internal_node_id());
  }
  if (from._internal_has_relative_pose()) {
    _internal_mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_relative_pose());
  }
  if (!(from._internal_translation_weight() <= 0 && from._internal_translation_weight() >= 0)) {
    _internal_set_translation_weight(from._internal_translation_weight());
  }
  if (!(from._internal_rotation_weight() <= 0 && from._internal_rotation_weight() >= 0)) {
    _internal_set_rotation_weight(from._internal_rotation_weight());
  }
  if (from._internal_tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseGraph_Constraint::CopyFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_Constraint::IsInitialized() const {
  return true;
}

void PoseGraph_Constraint::InternalSwap(PoseGraph_Constraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseGraph_Constraint, tag_)
      + sizeof(PoseGraph_Constraint::tag_)
      - PROTOBUF_FIELD_OFFSET(PoseGraph_Constraint, submap_id_)>(
          reinterpret_cast<char*>(&submap_id_),
          reinterpret_cast<char*>(&other->submap_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseGraph_Constraint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[2]);
}

// ===================================================================

class PoseGraph_LandmarkPose::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& global_pose(const PoseGraph_LandmarkPose* msg);
};

const ::cartographer::transform::proto::Rigid3d&
PoseGraph_LandmarkPose::_Internal::global_pose(const PoseGraph_LandmarkPose* msg) {
  return *msg->global_pose_;
}
void PoseGraph_LandmarkPose::clear_global_pose() {
  if (GetArenaForAllocation() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
}
PoseGraph_LandmarkPose::PoseGraph_LandmarkPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}
PoseGraph_LandmarkPose::PoseGraph_LandmarkPose(const PoseGraph_LandmarkPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  landmark_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_landmark_id().empty()) {
    landmark_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_landmark_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}

void PoseGraph_LandmarkPose::SharedCtor() {
landmark_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
global_pose_ = nullptr;
}

PoseGraph_LandmarkPose::~PoseGraph_LandmarkPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseGraph_LandmarkPose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  landmark_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete global_pose_;
}

void PoseGraph_LandmarkPose::ArenaDtor(void* object) {
  PoseGraph_LandmarkPose* _this = reinterpret_cast< PoseGraph_LandmarkPose* >(object);
  (void)_this;
}
void PoseGraph_LandmarkPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseGraph_LandmarkPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseGraph_LandmarkPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseGraph_LandmarkPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string landmark_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_landmark_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseGraph_LandmarkPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (!this->_internal_landmark_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_landmark_id().data(), static_cast<int>(this->_internal_landmark_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_landmark_id(), target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->_internal_has_global_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::global_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return target;
}

size_t PoseGraph_LandmarkPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (!this->_internal_landmark_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_landmark_id());
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->_internal_has_global_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseGraph_LandmarkPose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseGraph_LandmarkPose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseGraph_LandmarkPose::GetClassData() const { return &_class_data_; }

void PoseGraph_LandmarkPose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseGraph_LandmarkPose *>(to)->MergeFrom(
      static_cast<const PoseGraph_LandmarkPose &>(from));
}


void PoseGraph_LandmarkPose::MergeFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_landmark_id().empty()) {
    _internal_set_landmark_id(from._internal_landmark_id());
  }
  if (from._internal_has_global_pose()) {
    _internal_mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_global_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseGraph_LandmarkPose::CopyFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_LandmarkPose::IsInitialized() const {
  return true;
}

void PoseGraph_LandmarkPose::InternalSwap(PoseGraph_LandmarkPose* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &landmark_id_, lhs_arena,
      &other->landmark_id_, rhs_arena
  );
  swap(global_pose_, other->global_pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseGraph_LandmarkPose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[3]);
}

// ===================================================================

class PoseGraph::_Internal {
 public:
};

void PoseGraph::clear_trajectory() {
  trajectory_.Clear();
}
PoseGraph::PoseGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  constraint_(arena),
  trajectory_(arena),
  landmark_poses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.PoseGraph)
}
PoseGraph::PoseGraph(const PoseGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraint_(from.constraint_),
      trajectory_(from.trajectory_),
      landmark_poses_(from.landmark_poses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph)
}

void PoseGraph::SharedCtor() {
}

PoseGraph::~PoseGraph() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoseGraph::ArenaDtor(void* object) {
  PoseGraph* _this = reinterpret_cast< PoseGraph* >(object);
  (void)_this;
}
void PoseGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraint_.Clear();
  trajectory_.Clear();
  landmark_poses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_constraint(i), target, stream);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trajectory(i), target, stream);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_landmark_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph)
  return target;
}

size_t PoseGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  total_size += 1UL * this->_internal_constraint_size();
  for (const auto& msg : this->constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  total_size += 1UL * this->_internal_landmark_poses_size();
  for (const auto& msg : this->landmark_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseGraph::GetClassData() const { return &_class_data_; }

void PoseGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseGraph *>(to)->MergeFrom(
      static_cast<const PoseGraph &>(from));
}


void PoseGraph::MergeFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraint_.MergeFrom(from.constraint_);
  trajectory_.MergeFrom(from.trajectory_);
  landmark_poses_.MergeFrom(from.landmark_poses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseGraph::CopyFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph::IsInitialized() const {
  return true;
}

void PoseGraph::InternalSwap(PoseGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  constraint_.InternalSwap(&other->constraint_);
  trajectory_.InternalSwap(&other->trajectory_);
  landmark_poses_.InternalSwap(&other->landmark_poses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseGraph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::SubmapId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::NodeId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::NodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph_Constraint* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph_Constraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::PoseGraph_Constraint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph_LandmarkPose* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::PoseGraph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
