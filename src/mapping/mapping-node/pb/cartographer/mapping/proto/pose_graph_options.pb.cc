// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#include "cartographer/mapping/proto/pose_graph_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_covered_area_(0)
  , fresh_submaps_count_(0)
  , min_added_submaps_count_(0){}
struct PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal {
  constexpr PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal() {}
  union {
    PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseGraphOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal _PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
constexpr PoseGraphOptions::PoseGraphOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : constraint_builder_options_(nullptr)
  , optimization_problem_options_(nullptr)
  , overlapping_submaps_trimmer_2d_(nullptr)
  , optimize_every_n_nodes_(0)
  , max_num_final_iterations_(0)
  , global_sampling_ratio_(0)
  , matcher_translation_weight_(0)
  , matcher_rotation_weight_(0)
  , global_constraint_search_after_n_seconds_(0)
  , log_residual_histograms_(false){}
struct PoseGraphOptionsDefaultTypeInternal {
  constexpr PoseGraphOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseGraphOptionsDefaultTypeInternal() {}
  union {
    PoseGraphOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, fresh_submaps_count_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_covered_area_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_added_submaps_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimize_every_n_nodes_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, constraint_builder_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimization_problem_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, max_num_final_iterations_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_sampling_ratio_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, log_residual_histograms_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_constraint_search_after_n_seconds_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, overlapping_submaps_trimmer_2d_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D)},
  { 9, -1, -1, sizeof(::cartographer::mapping::proto::PoseGraphOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_PoseGraphOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3cartographer/mapping/proto/pose_graph_"
  "options.proto\022\032cartographer.mapping.prot"
  "o\032Fcartographer/mapping/proto/pose_graph"
  "/constraint_builder_options.proto\032Hcarto"
  "grapher/mapping/proto/pose_graph/optimiz"
  "ation_problem_options.proto\"\323\005\n\020PoseGrap"
  "hOptions\022\036\n\026optimize_every_n_nodes\030\001 \001(\005"
  "\022d\n\032constraint_builder_options\030\003 \001(\0132@.c"
  "artographer.mapping.constraints.proto.Co"
  "nstraintBuilderOptions\022\"\n\032matcher_transl"
  "ation_weight\030\007 \001(\001\022\037\n\027matcher_rotation_w"
  "eight\030\010 \001(\001\022i\n\034optimization_problem_opti"
  "ons\030\004 \001(\0132C.cartographer.mapping.optimiz"
  "ation.proto.OptimizationProblemOptions\022 "
  "\n\030max_num_final_iterations\030\006 \001(\005\022\035\n\025glob"
  "al_sampling_ratio\030\005 \001(\001\022\037\n\027log_residual_"
  "histograms\030\t \001(\010\0220\n(global_constraint_se"
  "arch_after_n_seconds\030\n \001(\001\022w\n\036overlappin"
  "g_submaps_trimmer_2d\030\013 \001(\0132O.cartographe"
  "r.mapping.proto.PoseGraphOptions.Overlap"
  "pingSubmapsTrimmerOptions2D\032|\n\"Overlappi"
  "ngSubmapsTrimmerOptions2D\022\033\n\023fresh_subma"
  "ps_count\030\001 \001(\005\022\030\n\020min_covered_area\030\002 \001(\001"
  "\022\037\n\027min_added_submaps_count\030\003 \001(\005b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto,
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = {
  false, false, 961, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, "cartographer/mapping/proto/pose_graph_options.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_Internal {
 public:
};

PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
}
PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_covered_area_, &from.min_covered_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_added_submaps_count_) -
    reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_covered_area_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_added_submaps_count_) -
    reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
}

PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::~PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::ArenaDtor(void* object) {
  PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* _this = reinterpret_cast< PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* >(object);
  (void)_this;
}
void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_covered_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_added_submaps_count_) -
      reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fresh_submaps_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fresh_submaps_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double min_covered_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_covered_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 min_added_submaps_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_added_submaps_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fresh_submaps_count = 1;
  if (this->_internal_fresh_submaps_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fresh_submaps_count(), target);
  }

  // double min_covered_area = 2;
  if (!(this->_internal_min_covered_area() <= 0 && this->_internal_min_covered_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_covered_area(), target);
  }

  // int32 min_added_submaps_count = 3;
  if (this->_internal_min_added_submaps_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_added_submaps_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  return target;
}

size_t PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min_covered_area = 2;
  if (!(this->_internal_min_covered_area() <= 0 && this->_internal_min_covered_area() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 fresh_submaps_count = 1;
  if (this->_internal_fresh_submaps_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fresh_submaps_count());
  }

  // int32 min_added_submaps_count = 3;
  if (this->_internal_min_added_submaps_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_added_submaps_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::GetClassData() const { return &_class_data_; }

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D *>(to)->MergeFrom(
      static_cast<const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D &>(from));
}


void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_min_covered_area() <= 0 && from._internal_min_covered_area() >= 0)) {
    _internal_set_min_covered_area(from._internal_min_covered_area());
  }
  if (from._internal_fresh_submaps_count() != 0) {
    _internal_set_fresh_submaps_count(from._internal_fresh_submaps_count());
  }
  if (from._internal_min_added_submaps_count() != 0) {
    _internal_set_min_added_submaps_count(from._internal_min_added_submaps_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::CopyFrom(const PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::IsInitialized() const {
  return true;
}

void PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::InternalSwap(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_added_submaps_count_)
      + sizeof(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::min_added_submaps_count_)
      - PROTOBUF_FIELD_OFFSET(PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D, min_covered_area_)>(
          reinterpret_cast<char*>(&min_covered_area_),
          reinterpret_cast<char*>(&other->min_covered_area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[0]);
}

// ===================================================================

class PoseGraphOptions::_Internal {
 public:
  static const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& constraint_builder_options(const PoseGraphOptions* msg);
  static const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& optimization_problem_options(const PoseGraphOptions* msg);
  static const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D& overlapping_submaps_trimmer_2d(const PoseGraphOptions* msg);
};

const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions&
PoseGraphOptions::_Internal::constraint_builder_options(const PoseGraphOptions* msg) {
  return *msg->constraint_builder_options_;
}
const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions&
PoseGraphOptions::_Internal::optimization_problem_options(const PoseGraphOptions* msg) {
  return *msg->optimization_problem_options_;
}
const ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D&
PoseGraphOptions::_Internal::overlapping_submaps_trimmer_2d(const PoseGraphOptions* msg) {
  return *msg->overlapping_submaps_trimmer_2d_;
}
void PoseGraphOptions::clear_constraint_builder_options() {
  if (GetArenaForAllocation() == nullptr && constraint_builder_options_ != nullptr) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = nullptr;
}
void PoseGraphOptions::clear_optimization_problem_options() {
  if (GetArenaForAllocation() == nullptr && optimization_problem_options_ != nullptr) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = nullptr;
}
PoseGraphOptions::PoseGraphOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.PoseGraphOptions)
}
PoseGraphOptions::PoseGraphOptions(const PoseGraphOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_constraint_builder_options()) {
    constraint_builder_options_ = new ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions(*from.constraint_builder_options_);
  } else {
    constraint_builder_options_ = nullptr;
  }
  if (from._internal_has_optimization_problem_options()) {
    optimization_problem_options_ = new ::cartographer::mapping::optimization::proto::OptimizationProblemOptions(*from.optimization_problem_options_);
  } else {
    optimization_problem_options_ = nullptr;
  }
  if (from._internal_has_overlapping_submaps_trimmer_2d()) {
    overlapping_submaps_trimmer_2d_ = new ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D(*from.overlapping_submaps_trimmer_2d_);
  } else {
    overlapping_submaps_trimmer_2d_ = nullptr;
  }
  ::memcpy(&optimize_every_n_nodes_, &from.optimize_every_n_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_residual_histograms_) -
    reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions)
}

void PoseGraphOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&constraint_builder_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&log_residual_histograms_) -
    reinterpret_cast<char*>(&constraint_builder_options_)) + sizeof(log_residual_histograms_));
}

PoseGraphOptions::~PoseGraphOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseGraphOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete constraint_builder_options_;
  if (this != internal_default_instance()) delete optimization_problem_options_;
  if (this != internal_default_instance()) delete overlapping_submaps_trimmer_2d_;
}

void PoseGraphOptions::ArenaDtor(void* object) {
  PoseGraphOptions* _this = reinterpret_cast< PoseGraphOptions* >(object);
  (void)_this;
}
void PoseGraphOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseGraphOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseGraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && constraint_builder_options_ != nullptr) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && optimization_problem_options_ != nullptr) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && overlapping_submaps_trimmer_2d_ != nullptr) {
    delete overlapping_submaps_trimmer_2d_;
  }
  overlapping_submaps_trimmer_2d_ = nullptr;
  ::memset(&optimize_every_n_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_residual_histograms_) -
      reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseGraphOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 optimize_every_n_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          optimize_every_n_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint_builder_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization_problem_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double global_sampling_ratio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          global_sampling_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 max_num_final_iterations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_num_final_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double matcher_translation_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          matcher_translation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double matcher_rotation_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          matcher_rotation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool log_residual_histograms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          log_residual_histograms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double global_constraint_search_after_n_seconds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          global_constraint_search_after_n_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlapping_submaps_trimmer_2d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseGraphOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optimize_every_n_nodes = 1;
  if (this->_internal_optimize_every_n_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optimize_every_n_nodes(), target);
  }

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->_internal_has_constraint_builder_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::constraint_builder_options(this), target, stream);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->_internal_has_optimization_problem_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::optimization_problem_options(this), target, stream);
  }

  // double global_sampling_ratio = 5;
  if (!(this->_internal_global_sampling_ratio() <= 0 && this->_internal_global_sampling_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_global_sampling_ratio(), target);
  }

  // int32 max_num_final_iterations = 6;
  if (this->_internal_max_num_final_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_num_final_iterations(), target);
  }

  // double matcher_translation_weight = 7;
  if (!(this->_internal_matcher_translation_weight() <= 0 && this->_internal_matcher_translation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_matcher_translation_weight(), target);
  }

  // double matcher_rotation_weight = 8;
  if (!(this->_internal_matcher_rotation_weight() <= 0 && this->_internal_matcher_rotation_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_matcher_rotation_weight(), target);
  }

  // bool log_residual_histograms = 9;
  if (this->_internal_log_residual_histograms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_log_residual_histograms(), target);
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (!(this->_internal_global_constraint_search_after_n_seconds() <= 0 && this->_internal_global_constraint_search_after_n_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_global_constraint_search_after_n_seconds(), target);
  }

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  if (this->_internal_has_overlapping_submaps_trimmer_2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::overlapping_submaps_trimmer_2d(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions)
  return target;
}

size_t PoseGraphOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->_internal_has_constraint_builder_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constraint_builder_options_);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->_internal_has_optimization_problem_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_problem_options_);
  }

  // .cartographer.mapping.proto.PoseGraphOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 11;
  if (this->_internal_has_overlapping_submaps_trimmer_2d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overlapping_submaps_trimmer_2d_);
  }

  // int32 optimize_every_n_nodes = 1;
  if (this->_internal_optimize_every_n_nodes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_optimize_every_n_nodes());
  }

  // int32 max_num_final_iterations = 6;
  if (this->_internal_max_num_final_iterations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_num_final_iterations());
  }

  // double global_sampling_ratio = 5;
  if (!(this->_internal_global_sampling_ratio() <= 0 && this->_internal_global_sampling_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double matcher_translation_weight = 7;
  if (!(this->_internal_matcher_translation_weight() <= 0 && this->_internal_matcher_translation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double matcher_rotation_weight = 8;
  if (!(this->_internal_matcher_rotation_weight() <= 0 && this->_internal_matcher_rotation_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (!(this->_internal_global_constraint_search_after_n_seconds() <= 0 && this->_internal_global_constraint_search_after_n_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // bool log_residual_histograms = 9;
  if (this->_internal_log_residual_histograms() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseGraphOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseGraphOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseGraphOptions::GetClassData() const { return &_class_data_; }

void PoseGraphOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseGraphOptions *>(to)->MergeFrom(
      static_cast<const PoseGraphOptions &>(from));
}


void PoseGraphOptions::MergeFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_constraint_builder_options()) {
    _internal_mutable_constraint_builder_options()->::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::MergeFrom(from._internal_constraint_builder_options());
  }
  if (from._internal_has_optimization_problem_options()) {
    _internal_mutable_optimization_problem_options()->::cartographer::mapping::optimization::proto::OptimizationProblemOptions::MergeFrom(from._internal_optimization_problem_options());
  }
  if (from._internal_has_overlapping_submaps_trimmer_2d()) {
    _internal_mutable_overlapping_submaps_trimmer_2d()->::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(from._internal_overlapping_submaps_trimmer_2d());
  }
  if (from._internal_optimize_every_n_nodes() != 0) {
    _internal_set_optimize_every_n_nodes(from._internal_optimize_every_n_nodes());
  }
  if (from._internal_max_num_final_iterations() != 0) {
    _internal_set_max_num_final_iterations(from._internal_max_num_final_iterations());
  }
  if (!(from._internal_global_sampling_ratio() <= 0 && from._internal_global_sampling_ratio() >= 0)) {
    _internal_set_global_sampling_ratio(from._internal_global_sampling_ratio());
  }
  if (!(from._internal_matcher_translation_weight() <= 0 && from._internal_matcher_translation_weight() >= 0)) {
    _internal_set_matcher_translation_weight(from._internal_matcher_translation_weight());
  }
  if (!(from._internal_matcher_rotation_weight() <= 0 && from._internal_matcher_rotation_weight() >= 0)) {
    _internal_set_matcher_rotation_weight(from._internal_matcher_rotation_weight());
  }
  if (!(from._internal_global_constraint_search_after_n_seconds() <= 0 && from._internal_global_constraint_search_after_n_seconds() >= 0)) {
    _internal_set_global_constraint_search_after_n_seconds(from._internal_global_constraint_search_after_n_seconds());
  }
  if (from._internal_log_residual_histograms() != 0) {
    _internal_set_log_residual_histograms(from._internal_log_residual_histograms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseGraphOptions::CopyFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions::IsInitialized() const {
  return true;
}

void PoseGraphOptions::InternalSwap(PoseGraphOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseGraphOptions, log_residual_histograms_)
      + sizeof(PoseGraphOptions::log_residual_histograms_)
      - PROTOBUF_FIELD_OFFSET(PoseGraphOptions, constraint_builder_options_)>(
          reinterpret_cast<char*>(&constraint_builder_options_),
          reinterpret_cast<char*>(&other->constraint_builder_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseGraphOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::PoseGraphOptions_OverlappingSubmapsTrimmerOptions2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraphOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraphOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::PoseGraphOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
