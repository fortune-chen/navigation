// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#include "cartographer/mapping/proto/trajectory_node_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr TrajectoryNodeData::TrajectoryNodeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rotational_scan_matcher_histogram_()
  , gravity_alignment_(nullptr)
  , filtered_gravity_aligned_point_cloud_(nullptr)
  , high_resolution_point_cloud_(nullptr)
  , low_resolution_point_cloud_(nullptr)
  , local_pose_(nullptr)
  , timestamp_(int64_t{0}){}
struct TrajectoryNodeDataDefaultTypeInternal {
  constexpr TrajectoryNodeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryNodeDataDefaultTypeInternal() {}
  union {
    TrajectoryNodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryNodeDataDefaultTypeInternal _TrajectoryNodeData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, gravity_alignment_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, filtered_gravity_aligned_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, high_resolution_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, low_resolution_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, rotational_scan_matcher_histogram_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryNodeData, local_pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::TrajectoryNodeData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5cartographer/mapping/proto/trajectory_"
  "node_data.proto\022\032cartographer.mapping.pr"
  "oto\032&cartographer/sensor/proto/sensor.pr"
  "oto\032,cartographer/transform/proto/transf"
  "orm.proto\"\335\003\n\022TrajectoryNodeData\022\021\n\ttime"
  "stamp\030\001 \001(\003\022D\n\021gravity_alignment\030\002 \001(\0132)"
  ".cartographer.transform.proto.Quaternion"
  "d\022]\n$filtered_gravity_aligned_point_clou"
  "d\030\003 \001(\0132/.cartographer.sensor.proto.Comp"
  "ressedPointCloud\022T\n\033high_resolution_poin"
  "t_cloud\030\004 \001(\0132/.cartographer.sensor.prot"
  "o.CompressedPointCloud\022S\n\032low_resolution"
  "_point_cloud\030\005 \001(\0132/.cartographer.sensor"
  ".proto.CompressedPointCloud\022)\n!rotationa"
  "l_scan_matcher_histogram\030\006 \003(\002\0229\n\nlocal_"
  "pose\030\007 \001(\0132%.cartographer.transform.prot"
  "o.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_deps[2] = {
  &::descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto,
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto = {
  false, false, 657, descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, "cartographer/mapping/proto/trajectory_node_data.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class TrajectoryNodeData::_Internal {
 public:
  static const ::cartographer::transform::proto::Quaterniond& gravity_alignment(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& filtered_gravity_aligned_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& high_resolution_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::sensor::proto::CompressedPointCloud& low_resolution_point_cloud(const TrajectoryNodeData* msg);
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const TrajectoryNodeData* msg);
};

const ::cartographer::transform::proto::Quaterniond&
TrajectoryNodeData::_Internal::gravity_alignment(const TrajectoryNodeData* msg) {
  return *msg->gravity_alignment_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::filtered_gravity_aligned_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->filtered_gravity_aligned_point_cloud_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::high_resolution_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->high_resolution_point_cloud_;
}
const ::cartographer::sensor::proto::CompressedPointCloud&
TrajectoryNodeData::_Internal::low_resolution_point_cloud(const TrajectoryNodeData* msg) {
  return *msg->low_resolution_point_cloud_;
}
const ::cartographer::transform::proto::Rigid3d&
TrajectoryNodeData::_Internal::local_pose(const TrajectoryNodeData* msg) {
  return *msg->local_pose_;
}
void TrajectoryNodeData::clear_gravity_alignment() {
  if (GetArenaForAllocation() == nullptr && gravity_alignment_ != nullptr) {
    delete gravity_alignment_;
  }
  gravity_alignment_ = nullptr;
}
void TrajectoryNodeData::clear_filtered_gravity_aligned_point_cloud() {
  if (GetArenaForAllocation() == nullptr && filtered_gravity_aligned_point_cloud_ != nullptr) {
    delete filtered_gravity_aligned_point_cloud_;
  }
  filtered_gravity_aligned_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_high_resolution_point_cloud() {
  if (GetArenaForAllocation() == nullptr && high_resolution_point_cloud_ != nullptr) {
    delete high_resolution_point_cloud_;
  }
  high_resolution_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_low_resolution_point_cloud() {
  if (GetArenaForAllocation() == nullptr && low_resolution_point_cloud_ != nullptr) {
    delete low_resolution_point_cloud_;
  }
  low_resolution_point_cloud_ = nullptr;
}
void TrajectoryNodeData::clear_local_pose() {
  if (GetArenaForAllocation() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
TrajectoryNodeData::TrajectoryNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rotational_scan_matcher_histogram_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.TrajectoryNodeData)
}
TrajectoryNodeData::TrajectoryNodeData(const TrajectoryNodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rotational_scan_matcher_histogram_(from.rotational_scan_matcher_histogram_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gravity_alignment()) {
    gravity_alignment_ = new ::cartographer::transform::proto::Quaterniond(*from.gravity_alignment_);
  } else {
    gravity_alignment_ = nullptr;
  }
  if (from._internal_has_filtered_gravity_aligned_point_cloud()) {
    filtered_gravity_aligned_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.filtered_gravity_aligned_point_cloud_);
  } else {
    filtered_gravity_aligned_point_cloud_ = nullptr;
  }
  if (from._internal_has_high_resolution_point_cloud()) {
    high_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.high_resolution_point_cloud_);
  } else {
    high_resolution_point_cloud_ = nullptr;
  }
  if (from._internal_has_low_resolution_point_cloud()) {
    low_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.low_resolution_point_cloud_);
  } else {
    low_resolution_point_cloud_ = nullptr;
  }
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryNodeData)
}

void TrajectoryNodeData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gravity_alignment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&gravity_alignment_)) + sizeof(timestamp_));
}

TrajectoryNodeData::~TrajectoryNodeData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryNodeData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrajectoryNodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete gravity_alignment_;
  if (this != internal_default_instance()) delete filtered_gravity_aligned_point_cloud_;
  if (this != internal_default_instance()) delete high_resolution_point_cloud_;
  if (this != internal_default_instance()) delete low_resolution_point_cloud_;
  if (this != internal_default_instance()) delete local_pose_;
}

void TrajectoryNodeData::ArenaDtor(void* object) {
  TrajectoryNodeData* _this = reinterpret_cast< TrajectoryNodeData* >(object);
  (void)_this;
}
void TrajectoryNodeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryNodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrajectoryNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.Clear();
  if (GetArenaForAllocation() == nullptr && gravity_alignment_ != nullptr) {
    delete gravity_alignment_;
  }
  gravity_alignment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && filtered_gravity_aligned_point_cloud_ != nullptr) {
    delete filtered_gravity_aligned_point_cloud_;
  }
  filtered_gravity_aligned_point_cloud_ = nullptr;
  if (GetArenaForAllocation() == nullptr && high_resolution_point_cloud_ != nullptr) {
    delete high_resolution_point_cloud_;
  }
  high_resolution_point_cloud_ = nullptr;
  if (GetArenaForAllocation() == nullptr && low_resolution_point_cloud_ != nullptr) {
    delete low_resolution_point_cloud_;
  }
  low_resolution_point_cloud_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryNodeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gravity_alignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtered_gravity_aligned_point_cloud(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_resolution_point_cloud(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_resolution_point_cloud(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float rotational_scan_matcher_histogram = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotational_scan_matcher_histogram(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_rotational_scan_matcher_histogram(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d local_pose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryNodeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->_internal_has_gravity_alignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gravity_alignment(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->_internal_has_filtered_gravity_aligned_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filtered_gravity_aligned_point_cloud(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->_internal_has_high_resolution_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::high_resolution_point_cloud(this), target, stream);
  }

  // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->_internal_has_low_resolution_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::low_resolution_point_cloud(this), target, stream);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  if (this->_internal_rotational_scan_matcher_histogram_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rotational_scan_matcher_histogram(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->_internal_has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryNodeData)
  return target;
}

size_t TrajectoryNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryNodeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotational_scan_matcher_histogram = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotational_scan_matcher_histogram_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->_internal_has_gravity_alignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gravity_alignment_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->_internal_has_filtered_gravity_aligned_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filtered_gravity_aligned_point_cloud_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->_internal_has_high_resolution_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_resolution_point_cloud_);
  }

  // .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->_internal_has_low_resolution_point_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_resolution_point_cloud_);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->_internal_has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryNodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryNodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryNodeData::GetClassData() const { return &_class_data_; }

void TrajectoryNodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryNodeData *>(to)->MergeFrom(
      static_cast<const TrajectoryNodeData &>(from));
}


void TrajectoryNodeData::MergeFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.MergeFrom(from.rotational_scan_matcher_histogram_);
  if (from._internal_has_gravity_alignment()) {
    _internal_mutable_gravity_alignment()->::cartographer::transform::proto::Quaterniond::MergeFrom(from._internal_gravity_alignment());
  }
  if (from._internal_has_filtered_gravity_aligned_point_cloud()) {
    _internal_mutable_filtered_gravity_aligned_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_filtered_gravity_aligned_point_cloud());
  }
  if (from._internal_has_high_resolution_point_cloud()) {
    _internal_mutable_high_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_high_resolution_point_cloud());
  }
  if (from._internal_has_low_resolution_point_cloud()) {
    _internal_mutable_low_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from._internal_low_resolution_point_cloud());
  }
  if (from._internal_has_local_pose()) {
    _internal_mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_local_pose());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryNodeData::CopyFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodeData::IsInitialized() const {
  return true;
}

void TrajectoryNodeData::InternalSwap(TrajectoryNodeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rotational_scan_matcher_histogram_.InternalSwap(&other->rotational_scan_matcher_histogram_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryNodeData, timestamp_)
      + sizeof(TrajectoryNodeData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryNodeData, gravity_alignment_)>(
          reinterpret_cast<char*>(&gravity_alignment_),
          reinterpret_cast<char*>(&other->gravity_alignment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryNodeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryNodeData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryNodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::TrajectoryNodeData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
