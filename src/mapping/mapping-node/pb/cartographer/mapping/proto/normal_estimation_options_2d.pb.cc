// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/normal_estimation_options_2d.proto

#include "cartographer/mapping/proto/normal_estimation_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr NormalEstimationOptions2D::NormalEstimationOptions2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_normal_samples_(0)
  , sample_radius_(0){}
struct NormalEstimationOptions2DDefaultTypeInternal {
  constexpr NormalEstimationOptions2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NormalEstimationOptions2DDefaultTypeInternal() {}
  union {
    NormalEstimationOptions2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NormalEstimationOptions2DDefaultTypeInternal _NormalEstimationOptions2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NormalEstimationOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NormalEstimationOptions2D, num_normal_samples_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NormalEstimationOptions2D, sample_radius_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::NormalEstimationOptions2D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_NormalEstimationOptions2D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=cartographer/mapping/proto/normal_esti"
  "mation_options_2d.proto\022\032cartographer.ma"
  "pping.proto\"N\n\031NormalEstimationOptions2D"
  "\022\032\n\022num_normal_samples\030\001 \001(\005\022\025\n\rsample_r"
  "adius\030\002 \001(\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto = {
  false, false, 179, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto, "cartographer/mapping/proto/normal_estimation_options_2d.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class NormalEstimationOptions2D::_Internal {
 public:
};

NormalEstimationOptions2D::NormalEstimationOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.NormalEstimationOptions2D)
}
NormalEstimationOptions2D::NormalEstimationOptions2D(const NormalEstimationOptions2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_normal_samples_, &from.num_normal_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_radius_) -
    reinterpret_cast<char*>(&num_normal_samples_)) + sizeof(sample_radius_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.NormalEstimationOptions2D)
}

void NormalEstimationOptions2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_normal_samples_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_radius_) -
    reinterpret_cast<char*>(&num_normal_samples_)) + sizeof(sample_radius_));
}

NormalEstimationOptions2D::~NormalEstimationOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NormalEstimationOptions2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NormalEstimationOptions2D::ArenaDtor(void* object) {
  NormalEstimationOptions2D* _this = reinterpret_cast< NormalEstimationOptions2D* >(object);
  (void)_this;
}
void NormalEstimationOptions2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalEstimationOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NormalEstimationOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_normal_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_radius_) -
      reinterpret_cast<char*>(&num_normal_samples_)) + sizeof(sample_radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalEstimationOptions2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_normal_samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_normal_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float sample_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sample_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalEstimationOptions2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_normal_samples = 1;
  if (this->_internal_num_normal_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_normal_samples(), target);
  }

  // float sample_radius = 2;
  if (!(this->_internal_sample_radius() <= 0 && this->_internal_sample_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sample_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.NormalEstimationOptions2D)
  return target;
}

size_t NormalEstimationOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_normal_samples = 1;
  if (this->_internal_num_normal_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_normal_samples());
  }

  // float sample_radius = 2;
  if (!(this->_internal_sample_radius() <= 0 && this->_internal_sample_radius() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NormalEstimationOptions2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NormalEstimationOptions2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NormalEstimationOptions2D::GetClassData() const { return &_class_data_; }

void NormalEstimationOptions2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NormalEstimationOptions2D *>(to)->MergeFrom(
      static_cast<const NormalEstimationOptions2D &>(from));
}


void NormalEstimationOptions2D::MergeFrom(const NormalEstimationOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_normal_samples() != 0) {
    _internal_set_num_normal_samples(from._internal_num_normal_samples());
  }
  if (!(from._internal_sample_radius() <= 0 && from._internal_sample_radius() >= 0)) {
    _internal_set_sample_radius(from._internal_sample_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NormalEstimationOptions2D::CopyFrom(const NormalEstimationOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalEstimationOptions2D::IsInitialized() const {
  return true;
}

void NormalEstimationOptions2D::InternalSwap(NormalEstimationOptions2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NormalEstimationOptions2D, sample_radius_)
      + sizeof(NormalEstimationOptions2D::sample_radius_)
      - PROTOBUF_FIELD_OFFSET(NormalEstimationOptions2D, num_normal_samples_)>(
          reinterpret_cast<char*>(&num_normal_samples_),
          reinterpret_cast<char*>(&other->num_normal_samples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalEstimationOptions2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::NormalEstimationOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::NormalEstimationOptions2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::NormalEstimationOptions2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
