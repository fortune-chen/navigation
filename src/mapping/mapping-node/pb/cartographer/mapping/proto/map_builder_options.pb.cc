// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_builder_options.proto

#include "cartographer/mapping/proto/map_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr MapBuilderOptions::MapBuilderOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_graph_options_(nullptr)
  , use_trajectory_builder_2d_(false)
  , use_trajectory_builder_3d_(false)
  , collate_by_trajectory_(false)
  , num_background_threads_(0){}
struct MapBuilderOptionsDefaultTypeInternal {
  constexpr MapBuilderOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapBuilderOptionsDefaultTypeInternal() {}
  union {
    MapBuilderOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapBuilderOptionsDefaultTypeInternal _MapBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, use_trajectory_builder_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, use_trajectory_builder_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, num_background_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, pose_graph_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapBuilderOptions, collate_by_trajectory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::MapBuilderOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_MapBuilderOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4cartographer/mapping/proto/map_builder"
  "_options.proto\022\032cartographer.mapping.pro"
  "to\0323cartographer/mapping/proto/pose_grap"
  "h_options.proto\"\342\001\n\021MapBuilderOptions\022!\n"
  "\031use_trajectory_builder_2d\030\001 \001(\010\022!\n\031use_"
  "trajectory_builder_3d\030\002 \001(\010\022\036\n\026num_backg"
  "round_threads\030\003 \001(\005\022H\n\022pose_graph_option"
  "s\030\004 \001(\0132,.cartographer.mapping.proto.Pos"
  "eGraphOptions\022\035\n\025collate_by_trajectory\030\005"
  " \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto = {
  false, false, 372, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, "cartographer/mapping/proto/map_builder_options.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_once, descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class MapBuilderOptions::_Internal {
 public:
  static const ::cartographer::mapping::proto::PoseGraphOptions& pose_graph_options(const MapBuilderOptions* msg);
};

const ::cartographer::mapping::proto::PoseGraphOptions&
MapBuilderOptions::_Internal::pose_graph_options(const MapBuilderOptions* msg) {
  return *msg->pose_graph_options_;
}
void MapBuilderOptions::clear_pose_graph_options() {
  if (GetArenaForAllocation() == nullptr && pose_graph_options_ != nullptr) {
    delete pose_graph_options_;
  }
  pose_graph_options_ = nullptr;
}
MapBuilderOptions::MapBuilderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.MapBuilderOptions)
}
MapBuilderOptions::MapBuilderOptions(const MapBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose_graph_options()) {
    pose_graph_options_ = new ::cartographer::mapping::proto::PoseGraphOptions(*from.pose_graph_options_);
  } else {
    pose_graph_options_ = nullptr;
  }
  ::memcpy(&use_trajectory_builder_2d_, &from.use_trajectory_builder_2d_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_background_threads_) -
    reinterpret_cast<char*>(&use_trajectory_builder_2d_)) + sizeof(num_background_threads_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapBuilderOptions)
}

void MapBuilderOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_graph_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_background_threads_) -
    reinterpret_cast<char*>(&pose_graph_options_)) + sizeof(num_background_threads_));
}

MapBuilderOptions::~MapBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapBuilderOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapBuilderOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_graph_options_;
}

void MapBuilderOptions::ArenaDtor(void* object) {
  MapBuilderOptions* _this = reinterpret_cast< MapBuilderOptions* >(object);
  (void)_this;
}
void MapBuilderOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_graph_options_ != nullptr) {
    delete pose_graph_options_;
  }
  pose_graph_options_ = nullptr;
  ::memset(&use_trajectory_builder_2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_background_threads_) -
      reinterpret_cast<char*>(&use_trajectory_builder_2d_)) + sizeof(num_background_threads_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapBuilderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool use_trajectory_builder_2d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_trajectory_builder_2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_trajectory_builder_3d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_trajectory_builder_3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_background_threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_background_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_graph_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool collate_by_trajectory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          collate_by_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapBuilderOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapBuilderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_trajectory_builder_2d = 1;
  if (this->_internal_use_trajectory_builder_2d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_trajectory_builder_2d(), target);
  }

  // bool use_trajectory_builder_3d = 2;
  if (this->_internal_use_trajectory_builder_3d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_trajectory_builder_3d(), target);
  }

  // int32 num_background_threads = 3;
  if (this->_internal_num_background_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_background_threads(), target);
  }

  // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->_internal_has_pose_graph_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose_graph_options(this), target, stream);
  }

  // bool collate_by_trajectory = 5;
  if (this->_internal_collate_by_trajectory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_collate_by_trajectory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapBuilderOptions)
  return target;
}

size_t MapBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapBuilderOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->_internal_has_pose_graph_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_graph_options_);
  }

  // bool use_trajectory_builder_2d = 1;
  if (this->_internal_use_trajectory_builder_2d() != 0) {
    total_size += 1 + 1;
  }

  // bool use_trajectory_builder_3d = 2;
  if (this->_internal_use_trajectory_builder_3d() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_by_trajectory = 5;
  if (this->_internal_collate_by_trajectory() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_background_threads = 3;
  if (this->_internal_num_background_threads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_background_threads());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapBuilderOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapBuilderOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapBuilderOptions::GetClassData() const { return &_class_data_; }

void MapBuilderOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapBuilderOptions *>(to)->MergeFrom(
      static_cast<const MapBuilderOptions &>(from));
}


void MapBuilderOptions::MergeFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose_graph_options()) {
    _internal_mutable_pose_graph_options()->::cartographer::mapping::proto::PoseGraphOptions::MergeFrom(from._internal_pose_graph_options());
  }
  if (from._internal_use_trajectory_builder_2d() != 0) {
    _internal_set_use_trajectory_builder_2d(from._internal_use_trajectory_builder_2d());
  }
  if (from._internal_use_trajectory_builder_3d() != 0) {
    _internal_set_use_trajectory_builder_3d(from._internal_use_trajectory_builder_3d());
  }
  if (from._internal_collate_by_trajectory() != 0) {
    _internal_set_collate_by_trajectory(from._internal_collate_by_trajectory());
  }
  if (from._internal_num_background_threads() != 0) {
    _internal_set_num_background_threads(from._internal_num_background_threads());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapBuilderOptions::CopyFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderOptions::IsInitialized() const {
  return true;
}

void MapBuilderOptions::InternalSwap(MapBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapBuilderOptions, num_background_threads_)
      + sizeof(MapBuilderOptions::num_background_threads_)
      - PROTOBUF_FIELD_OFFSET(MapBuilderOptions, pose_graph_options_)>(
          reinterpret_cast<char*>(&pose_graph_options_),
          reinterpret_cast<char*>(&other->pose_graph_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapBuilderOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MapBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MapBuilderOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::MapBuilderOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
