// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.proto

#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {
constexpr FastCorrelativeScanMatcherOptions2D::FastCorrelativeScanMatcherOptions2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linear_search_window_(0)
  , angular_search_window_(0)
  , branch_and_bound_depth_(0){}
struct FastCorrelativeScanMatcherOptions2DDefaultTypeInternal {
  constexpr FastCorrelativeScanMatcherOptions2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FastCorrelativeScanMatcherOptions2DDefaultTypeInternal() {}
  union {
    FastCorrelativeScanMatcherOptions2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FastCorrelativeScanMatcherOptions2DDefaultTypeInternal _FastCorrelativeScanMatcherOptions2D_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D, linear_search_window_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D, angular_search_window_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D, branch_and_bound_depth_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::scan_matching::proto::_FastCorrelativeScanMatcherOptions2D_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nWcartographer/mapping/proto/scan_matchi"
  "ng/fast_correlative_scan_matcher_options"
  "_2d.proto\022(cartographer.mapping.scan_mat"
  "ching.proto\"\202\001\n#FastCorrelativeScanMatch"
  "erOptions2D\022\034\n\024linear_search_window\030\003 \001("
  "\001\022\035\n\025angular_search_window\030\004 \001(\001\022\036\n\026bran"
  "ch_and_bound_depth\030\002 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto = {
  false, false, 272, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto, "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto);
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// ===================================================================

class FastCorrelativeScanMatcherOptions2D::_Internal {
 public:
};

FastCorrelativeScanMatcherOptions2D::FastCorrelativeScanMatcherOptions2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
}
FastCorrelativeScanMatcherOptions2D::FastCorrelativeScanMatcherOptions2D(const FastCorrelativeScanMatcherOptions2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&linear_search_window_, &from.linear_search_window_,
    static_cast<size_t>(reinterpret_cast<char*>(&branch_and_bound_depth_) -
    reinterpret_cast<char*>(&linear_search_window_)) + sizeof(branch_and_bound_depth_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
}

void FastCorrelativeScanMatcherOptions2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_search_window_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&branch_and_bound_depth_) -
    reinterpret_cast<char*>(&linear_search_window_)) + sizeof(branch_and_bound_depth_));
}

FastCorrelativeScanMatcherOptions2D::~FastCorrelativeScanMatcherOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FastCorrelativeScanMatcherOptions2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FastCorrelativeScanMatcherOptions2D::ArenaDtor(void* object) {
  FastCorrelativeScanMatcherOptions2D* _this = reinterpret_cast< FastCorrelativeScanMatcherOptions2D* >(object);
  (void)_this;
}
void FastCorrelativeScanMatcherOptions2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastCorrelativeScanMatcherOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FastCorrelativeScanMatcherOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_search_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_and_bound_depth_) -
      reinterpret_cast<char*>(&linear_search_window_)) + sizeof(branch_and_bound_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastCorrelativeScanMatcherOptions2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 branch_and_bound_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          branch_and_bound_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double linear_search_window = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          linear_search_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angular_search_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          angular_search_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastCorrelativeScanMatcherOptions2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 branch_and_bound_depth = 2;
  if (this->_internal_branch_and_bound_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_branch_and_bound_depth(), target);
  }

  // double linear_search_window = 3;
  if (!(this->_internal_linear_search_window() <= 0 && this->_internal_linear_search_window() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_linear_search_window(), target);
  }

  // double angular_search_window = 4;
  if (!(this->_internal_angular_search_window() <= 0 && this->_internal_angular_search_window() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_angular_search_window(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  return target;
}

size_t FastCorrelativeScanMatcherOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double linear_search_window = 3;
  if (!(this->_internal_linear_search_window() <= 0 && this->_internal_linear_search_window() >= 0)) {
    total_size += 1 + 8;
  }

  // double angular_search_window = 4;
  if (!(this->_internal_angular_search_window() <= 0 && this->_internal_angular_search_window() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 branch_and_bound_depth = 2;
  if (this->_internal_branch_and_bound_depth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_branch_and_bound_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FastCorrelativeScanMatcherOptions2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FastCorrelativeScanMatcherOptions2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FastCorrelativeScanMatcherOptions2D::GetClassData() const { return &_class_data_; }

void FastCorrelativeScanMatcherOptions2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FastCorrelativeScanMatcherOptions2D *>(to)->MergeFrom(
      static_cast<const FastCorrelativeScanMatcherOptions2D &>(from));
}


void FastCorrelativeScanMatcherOptions2D::MergeFrom(const FastCorrelativeScanMatcherOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_linear_search_window() <= 0 && from._internal_linear_search_window() >= 0)) {
    _internal_set_linear_search_window(from._internal_linear_search_window());
  }
  if (!(from._internal_angular_search_window() <= 0 && from._internal_angular_search_window() >= 0)) {
    _internal_set_angular_search_window(from._internal_angular_search_window());
  }
  if (from._internal_branch_and_bound_depth() != 0) {
    _internal_set_branch_and_bound_depth(from._internal_branch_and_bound_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FastCorrelativeScanMatcherOptions2D::CopyFrom(const FastCorrelativeScanMatcherOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastCorrelativeScanMatcherOptions2D::IsInitialized() const {
  return true;
}

void FastCorrelativeScanMatcherOptions2D::InternalSwap(FastCorrelativeScanMatcherOptions2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FastCorrelativeScanMatcherOptions2D, branch_and_bound_depth_)
      + sizeof(FastCorrelativeScanMatcherOptions2D::branch_and_bound_depth_)
      - PROTOBUF_FIELD_OFFSET(FastCorrelativeScanMatcherOptions2D, linear_search_window_)>(
          reinterpret_cast<char*>(&linear_search_window_),
          reinterpret_cast<char*>(&other->linear_search_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FastCorrelativeScanMatcherOptions2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
