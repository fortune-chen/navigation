// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/motion_filter_options.proto

#include "cartographer/mapping/proto/motion_filter_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace mapping {
namespace proto {
constexpr MotionFilterOptions::MotionFilterOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_time_seconds_(0)
  , max_distance_meters_(0)
  , max_angle_radians_(0){}
struct MotionFilterOptionsDefaultTypeInternal {
  constexpr MotionFilterOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionFilterOptionsDefaultTypeInternal() {}
  union {
    MotionFilterOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionFilterOptionsDefaultTypeInternal _MotionFilterOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MotionFilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MotionFilterOptions, max_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MotionFilterOptions, max_distance_meters_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MotionFilterOptions, max_angle_radians_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::mapping::proto::MotionFilterOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::mapping::proto::_MotionFilterOptions_default_instance_),
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6cartographer/mapping/proto/motion_filt"
  "er_options.proto\022\032cartographer.mapping.p"
  "roto\"g\n\023MotionFilterOptions\022\030\n\020max_time_"
  "seconds\030\001 \001(\001\022\033\n\023max_distance_meters\030\002 \001"
  "(\001\022\031\n\021max_angle_radians\030\003 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto = {
  false, false, 197, descriptor_table_protodef_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto, "cartographer/mapping/proto/motion_filter_options.proto", 
  &descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto_getter() {
  return &descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto(&descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto);
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class MotionFilterOptions::_Internal {
 public:
};

MotionFilterOptions::MotionFilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.mapping.proto.MotionFilterOptions)
}
MotionFilterOptions::MotionFilterOptions(const MotionFilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_time_seconds_, &from.max_time_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_angle_radians_) -
    reinterpret_cast<char*>(&max_time_seconds_)) + sizeof(max_angle_radians_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MotionFilterOptions)
}

void MotionFilterOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_time_seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_angle_radians_) -
    reinterpret_cast<char*>(&max_time_seconds_)) + sizeof(max_angle_radians_));
}

MotionFilterOptions::~MotionFilterOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MotionFilterOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotionFilterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotionFilterOptions::ArenaDtor(void* object) {
  MotionFilterOptions* _this = reinterpret_cast< MotionFilterOptions* >(object);
  (void)_this;
}
void MotionFilterOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionFilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionFilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MotionFilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_time_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_angle_radians_) -
      reinterpret_cast<char*>(&max_time_seconds_)) + sizeof(max_angle_radians_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionFilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_time_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_distance_meters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_distance_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_angle_radians = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_angle_radians_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionFilterOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MotionFilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_time_seconds = 1;
  if (!(this->_internal_max_time_seconds() <= 0 && this->_internal_max_time_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_time_seconds(), target);
  }

  // double max_distance_meters = 2;
  if (!(this->_internal_max_distance_meters() <= 0 && this->_internal_max_distance_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_distance_meters(), target);
  }

  // double max_angle_radians = 3;
  if (!(this->_internal_max_angle_radians() <= 0 && this->_internal_max_angle_radians() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_angle_radians(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MotionFilterOptions)
  return target;
}

size_t MotionFilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MotionFilterOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_time_seconds = 1;
  if (!(this->_internal_max_time_seconds() <= 0 && this->_internal_max_time_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_distance_meters = 2;
  if (!(this->_internal_max_distance_meters() <= 0 && this->_internal_max_distance_meters() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_angle_radians = 3;
  if (!(this->_internal_max_angle_radians() <= 0 && this->_internal_max_angle_radians() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionFilterOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionFilterOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionFilterOptions::GetClassData() const { return &_class_data_; }

void MotionFilterOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionFilterOptions *>(to)->MergeFrom(
      static_cast<const MotionFilterOptions &>(from));
}


void MotionFilterOptions::MergeFrom(const MotionFilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MotionFilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_max_time_seconds() <= 0 && from._internal_max_time_seconds() >= 0)) {
    _internal_set_max_time_seconds(from._internal_max_time_seconds());
  }
  if (!(from._internal_max_distance_meters() <= 0 && from._internal_max_distance_meters() >= 0)) {
    _internal_set_max_distance_meters(from._internal_max_distance_meters());
  }
  if (!(from._internal_max_angle_radians() <= 0 && from._internal_max_angle_radians() >= 0)) {
    _internal_set_max_angle_radians(from._internal_max_angle_radians());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionFilterOptions::CopyFrom(const MotionFilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MotionFilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionFilterOptions::IsInitialized() const {
  return true;
}

void MotionFilterOptions::InternalSwap(MotionFilterOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionFilterOptions, max_angle_radians_)
      + sizeof(MotionFilterOptions::max_angle_radians_)
      - PROTOBUF_FIELD_OFFSET(MotionFilterOptions, max_time_seconds_)>(
          reinterpret_cast<char*>(&max_time_seconds_),
          reinterpret_cast<char*>(&other->max_time_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionFilterOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto_getter, &descriptor_table_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto_once,
      file_level_metadata_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MotionFilterOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MotionFilterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::mapping::proto::MotionFilterOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
