// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/timestamped_transform.proto

#include "cartographer/transform/proto/timestamped_transform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cartographer {
namespace transform {
namespace proto {
constexpr TimestampedTransform::TimestampedTransform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , time_(int64_t{0}){}
struct TimestampedTransformDefaultTypeInternal {
  constexpr TimestampedTransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimestampedTransformDefaultTypeInternal() {}
  union {
    TimestampedTransform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimestampedTransformDefaultTypeInternal _TimestampedTransform_default_instance_;
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, time_),
  PROTOBUF_FIELD_OFFSET(::cartographer::transform::proto::TimestampedTransform, transform_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cartographer::transform::proto::TimestampedTransform)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cartographer::transform::proto::_TimestampedTransform_default_instance_),
};

const char descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8cartographer/transform/proto/timestamp"
  "ed_transform.proto\022\034cartographer.transfo"
  "rm.proto\032,cartographer/transform/proto/t"
  "ransform.proto\"^\n\024TimestampedTransform\022\014"
  "\n\004time\030\001 \001(\003\0228\n\ttransform\030\002 \001(\0132%.cartog"
  "rapher.transform.proto.Rigid3db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_deps[1] = {
  &::descriptor_table_cartographer_2ftransform_2fproto_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto = {
  false, false, 238, descriptor_table_protodef_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, "cartographer/transform/proto/timestamped_transform.proto", 
  &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_once, descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto::offsets,
  file_level_metadata_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, file_level_enum_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto, file_level_service_descriptors_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_getter() {
  return &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto(&descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto);
namespace cartographer {
namespace transform {
namespace proto {

// ===================================================================

class TimestampedTransform::_Internal {
 public:
  static const ::cartographer::transform::proto::Rigid3d& transform(const TimestampedTransform* msg);
};

const ::cartographer::transform::proto::Rigid3d&
TimestampedTransform::_Internal::transform(const TimestampedTransform* msg) {
  return *msg->transform_;
}
void TimestampedTransform::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
TimestampedTransform::TimestampedTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cartographer.transform.proto.TimestampedTransform)
}
TimestampedTransform::TimestampedTransform(const TimestampedTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::cartographer::transform::proto::Rigid3d(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.TimestampedTransform)
}

void TimestampedTransform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(time_));
}

TimestampedTransform::~TimestampedTransform() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.TimestampedTransform)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimestampedTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void TimestampedTransform::ArenaDtor(void* object) {
  TimestampedTransform* _this = reinterpret_cast< TimestampedTransform* >(object);
  (void)_this;
}
void TimestampedTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimestampedTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimestampedTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.TimestampedTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampedTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cartographer.transform.proto.Rigid3d transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampedTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.TimestampedTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->_internal_has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.TimestampedTransform)
  return target;
}

size_t TimestampedTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.TimestampedTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimestampedTransform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimestampedTransform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimestampedTransform::GetClassData() const { return &_class_data_; }

void TimestampedTransform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimestampedTransform *>(to)->MergeFrom(
      static_cast<const TimestampedTransform &>(from));
}


void TimestampedTransform::MergeFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.TimestampedTransform)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transform()) {
    _internal_mutable_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from._internal_transform());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampedTransform::CopyFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.TimestampedTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampedTransform::IsInitialized() const {
  return true;
}

void TimestampedTransform::InternalSwap(TimestampedTransform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimestampedTransform, time_)
      + sizeof(TimestampedTransform::time_)
      - PROTOBUF_FIELD_OFFSET(TimestampedTransform, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampedTransform::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_getter, &descriptor_table_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_once,
      file_level_metadata_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cartographer::transform::proto::TimestampedTransform* Arena::CreateMaybeMessage< ::cartographer::transform::proto::TimestampedTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cartographer::transform::proto::TimestampedTransform >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
