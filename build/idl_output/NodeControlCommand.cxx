// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NodeControlCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NodeControlCommand.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

NodeControlCommand::NodeControlCommand()
{
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d7acb34
    m_type = 0;
    // m_do_mapping com.eprosima.idl.parser.typecode.PrimitiveTypeCode@48a242ce
    m_do_mapping = 0;
    // m_map_path com.eprosima.idl.parser.typecode.StringTypeCode@1e4a7dd4
    m_map_path ="";

}

NodeControlCommand::~NodeControlCommand()
{


}

NodeControlCommand::NodeControlCommand(
        const NodeControlCommand& x)
{
    m_type = x.m_type;
    m_do_mapping = x.m_do_mapping;
    m_map_path = x.m_map_path;
}

NodeControlCommand::NodeControlCommand(
        NodeControlCommand&& x)
{
    m_type = x.m_type;
    m_do_mapping = x.m_do_mapping;
    m_map_path = std::move(x.m_map_path);
}

NodeControlCommand& NodeControlCommand::operator =(
        const NodeControlCommand& x)
{

    m_type = x.m_type;
    m_do_mapping = x.m_do_mapping;
    m_map_path = x.m_map_path;

    return *this;
}

NodeControlCommand& NodeControlCommand::operator =(
        NodeControlCommand&& x)
{

    m_type = x.m_type;
    m_do_mapping = x.m_do_mapping;
    m_map_path = std::move(x.m_map_path);

    return *this;
}

size_t NodeControlCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t NodeControlCommand::getCdrSerializedSize(
        const NodeControlCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_path().size() + 1;


    return current_alignment - initial_alignment;
}

void NodeControlCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_type;
    scdr << m_do_mapping;
    scdr << m_map_path;

}

void NodeControlCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_type;
    dcdr >> m_do_mapping;
    dcdr >> m_map_path;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void NodeControlCommand::type(
        char _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
char NodeControlCommand::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
char& NodeControlCommand::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member do_mapping
 * @param _do_mapping New value for member do_mapping
 */
void NodeControlCommand::do_mapping(
        char _do_mapping)
{
    m_do_mapping = _do_mapping;
}

/*!
 * @brief This function returns the value of member do_mapping
 * @return Value of member do_mapping
 */
char NodeControlCommand::do_mapping() const
{
    return m_do_mapping;
}

/*!
 * @brief This function returns a reference to member do_mapping
 * @return Reference to member do_mapping
 */
char& NodeControlCommand::do_mapping()
{
    return m_do_mapping;
}

/*!
 * @brief This function copies the value in member map_path
 * @param _map_path New value to be copied in member map_path
 */
void NodeControlCommand::map_path(
        const std::string& _map_path)
{
    m_map_path = _map_path;
}

/*!
 * @brief This function moves the value in member map_path
 * @param _map_path New value to be moved in member map_path
 */
void NodeControlCommand::map_path(
        std::string&& _map_path)
{
    m_map_path = std::move(_map_path);
}

/*!
 * @brief This function returns a constant reference to member map_path
 * @return Constant reference to member map_path
 */
const std::string& NodeControlCommand::map_path() const
{
    return m_map_path;
}

/*!
 * @brief This function returns a reference to member map_path
 * @return Reference to member map_path
 */
std::string& NodeControlCommand::map_path()
{
    return m_map_path;
}

size_t NodeControlCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool NodeControlCommand::isKeyDefined()
{
    return false;
}

void NodeControlCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
