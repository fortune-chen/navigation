// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TF2Communication.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TF2Communication.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TF2RequestTime::TF2RequestTime()
{
    // m_time_sec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12e61fe6
    m_time_sec = 0;
    // m_time_nsec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ee955a8
    m_time_nsec = 0;

}

TF2RequestTime::~TF2RequestTime()
{

}

TF2RequestTime::TF2RequestTime(
        const TF2RequestTime& x)
{
    m_time_sec = x.m_time_sec;
    m_time_nsec = x.m_time_nsec;
}

TF2RequestTime::TF2RequestTime(
        TF2RequestTime&& x)
{
    m_time_sec = x.m_time_sec;
    m_time_nsec = x.m_time_nsec;
}

TF2RequestTime& TF2RequestTime::operator =(
        const TF2RequestTime& x)
{

    m_time_sec = x.m_time_sec;
    m_time_nsec = x.m_time_nsec;

    return *this;
}

TF2RequestTime& TF2RequestTime::operator =(
        TF2RequestTime&& x)
{

    m_time_sec = x.m_time_sec;
    m_time_nsec = x.m_time_nsec;

    return *this;
}

size_t TF2RequestTime::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t TF2RequestTime::getCdrSerializedSize(
        const TF2RequestTime& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void TF2RequestTime::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time_sec;
    scdr << m_time_nsec;

}

void TF2RequestTime::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time_sec;
    dcdr >> m_time_nsec;
}

/*!
 * @brief This function sets a value in member time_sec
 * @param _time_sec New value for member time_sec
 */
void TF2RequestTime::time_sec(
        uint32_t _time_sec)
{
    m_time_sec = _time_sec;
}

/*!
 * @brief This function returns the value of member time_sec
 * @return Value of member time_sec
 */
uint32_t TF2RequestTime::time_sec() const
{
    return m_time_sec;
}

/*!
 * @brief This function returns a reference to member time_sec
 * @return Reference to member time_sec
 */
uint32_t& TF2RequestTime::time_sec()
{
    return m_time_sec;
}

/*!
 * @brief This function sets a value in member time_nsec
 * @param _time_nsec New value for member time_nsec
 */
void TF2RequestTime::time_nsec(
        uint32_t _time_nsec)
{
    m_time_nsec = _time_nsec;
}

/*!
 * @brief This function returns the value of member time_nsec
 * @return Value of member time_nsec
 */
uint32_t TF2RequestTime::time_nsec() const
{
    return m_time_nsec;
}

/*!
 * @brief This function returns a reference to member time_nsec
 * @return Reference to member time_nsec
 */
uint32_t& TF2RequestTime::time_nsec()
{
    return m_time_nsec;
}


size_t TF2RequestTime::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TF2RequestTime::isKeyDefined()
{
    return false;
}

void TF2RequestTime::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

TF2RequestDuration::TF2RequestDuration()
{
    // m_duration_sec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b6faea6
    m_duration_sec = 0;
    // m_duration_nsec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@778d1062
    m_duration_nsec = 0;

}

TF2RequestDuration::~TF2RequestDuration()
{

}

TF2RequestDuration::TF2RequestDuration(
        const TF2RequestDuration& x)
{
    m_duration_sec = x.m_duration_sec;
    m_duration_nsec = x.m_duration_nsec;
}

TF2RequestDuration::TF2RequestDuration(
        TF2RequestDuration&& x)
{
    m_duration_sec = x.m_duration_sec;
    m_duration_nsec = x.m_duration_nsec;
}

TF2RequestDuration& TF2RequestDuration::operator =(
        const TF2RequestDuration& x)
{

    m_duration_sec = x.m_duration_sec;
    m_duration_nsec = x.m_duration_nsec;

    return *this;
}

TF2RequestDuration& TF2RequestDuration::operator =(
        TF2RequestDuration&& x)
{

    m_duration_sec = x.m_duration_sec;
    m_duration_nsec = x.m_duration_nsec;

    return *this;
}

size_t TF2RequestDuration::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t TF2RequestDuration::getCdrSerializedSize(
        const TF2RequestDuration& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void TF2RequestDuration::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_duration_sec;
    scdr << m_duration_nsec;

}

void TF2RequestDuration::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_duration_sec;
    dcdr >> m_duration_nsec;
}

/*!
 * @brief This function sets a value in member duration_sec
 * @param _duration_sec New value for member duration_sec
 */
void TF2RequestDuration::duration_sec(
        int32_t _duration_sec)
{
    m_duration_sec = _duration_sec;
}

/*!
 * @brief This function returns the value of member duration_sec
 * @return Value of member duration_sec
 */
int32_t TF2RequestDuration::duration_sec() const
{
    return m_duration_sec;
}

/*!
 * @brief This function returns a reference to member duration_sec
 * @return Reference to member duration_sec
 */
int32_t& TF2RequestDuration::duration_sec()
{
    return m_duration_sec;
}

/*!
 * @brief This function sets a value in member duration_nsec
 * @param _duration_nsec New value for member duration_nsec
 */
void TF2RequestDuration::duration_nsec(
        int32_t _duration_nsec)
{
    m_duration_nsec = _duration_nsec;
}

/*!
 * @brief This function returns the value of member duration_nsec
 * @return Value of member duration_nsec
 */
int32_t TF2RequestDuration::duration_nsec() const
{
    return m_duration_nsec;
}

/*!
 * @brief This function returns a reference to member duration_nsec
 * @return Reference to member duration_nsec
 */
int32_t& TF2RequestDuration::duration_nsec()
{
    return m_duration_nsec;
}


size_t TF2RequestDuration::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TF2RequestDuration::isKeyDefined()
{
    return false;
}

void TF2RequestDuration::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


TF2Transform::TF2Transform()
{
    // m_type com.eprosima.idl.parser.typecode.EnumTypeCode@56528192
    m_type = ::kPoseStamped;
    // m_serialized com.eprosima.idl.parser.typecode.SequenceTypeCode@6e0dec4a


}

TF2Transform::~TF2Transform()
{

}

TF2Transform::TF2Transform(
        const TF2Transform& x)
{
    m_type = x.m_type;
    m_serialized = x.m_serialized;
}

TF2Transform::TF2Transform(
        TF2Transform&& x)
{
    m_type = x.m_type;
    m_serialized = std::move(x.m_serialized);
}

TF2Transform& TF2Transform::operator =(
        const TF2Transform& x)
{

    m_type = x.m_type;
    m_serialized = x.m_serialized;

    return *this;
}

TF2Transform& TF2Transform::operator =(
        TF2Transform&& x)
{

    m_type = x.m_type;
    m_serialized = std::move(x.m_serialized);

    return *this;
}

size_t TF2Transform::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (4096 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t TF2Transform::getCdrSerializedSize(
        const TF2Transform& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.serialized().size() > 0)
    {
        current_alignment += (data.serialized().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void TF2Transform::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_type;
    scdr << m_serialized;

}

void TF2Transform::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_type = (TF2TransformType)enum_value;
    }

    dcdr >> m_serialized;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void TF2Transform::type(
        TF2TransformType _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
TF2TransformType TF2Transform::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
TF2TransformType& TF2Transform::type()
{
    return m_type;
}

/*!
 * @brief This function copies the value in member serialized
 * @param _serialized New value to be copied in member serialized
 */
void TF2Transform::serialized(
        const std::vector<char>& _serialized)
{
    m_serialized = _serialized;
}

/*!
 * @brief This function moves the value in member serialized
 * @param _serialized New value to be moved in member serialized
 */
void TF2Transform::serialized(
        std::vector<char>&& _serialized)
{
    m_serialized = std::move(_serialized);
}

/*!
 * @brief This function returns a constant reference to member serialized
 * @return Constant reference to member serialized
 */
const std::vector<char>& TF2Transform::serialized() const
{
    return m_serialized;
}

/*!
 * @brief This function returns a reference to member serialized
 * @return Reference to member serialized
 */
std::vector<char>& TF2Transform::serialized()
{
    return m_serialized;
}

size_t TF2Transform::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TF2Transform::isKeyDefined()
{
    return false;
}

void TF2Transform::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

TF2Request::TF2Request()
{
    // m_request_id com.eprosima.idl.parser.typecode.StringTypeCode@96def03
    m_request_id ="";
    // m_path com.eprosima.idl.parser.typecode.StringTypeCode@5ccddd20
    m_path ="";
    // m_source_frame com.eprosima.idl.parser.typecode.StringTypeCode@1ed1993a
    m_source_frame ="";
    // m_target_frame com.eprosima.idl.parser.typecode.StringTypeCode@1f3f4916
    m_target_frame ="";
    // m_fixed_frame com.eprosima.idl.parser.typecode.StringTypeCode@794cb805
    m_fixed_frame ="";
    // m_source_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4b5a5ed1

    // m_target_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4b5a5ed1

    // m_time com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4b5a5ed1

    // m_duration com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@59d016c9

    // m_transform com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3cc2931c


}

TF2Request::~TF2Request()
{









}

TF2Request::TF2Request(
        const TF2Request& x)
{
    m_request_id = x.m_request_id;
    m_path = x.m_path;
    m_source_frame = x.m_source_frame;
    m_target_frame = x.m_target_frame;
    m_fixed_frame = x.m_fixed_frame;
    m_source_time = x.m_source_time;
    m_target_time = x.m_target_time;
    m_time = x.m_time;
    m_duration = x.m_duration;
    m_transform = x.m_transform;
}

TF2Request::TF2Request(
        TF2Request&& x)
{
    m_request_id = std::move(x.m_request_id);
    m_path = std::move(x.m_path);
    m_source_frame = std::move(x.m_source_frame);
    m_target_frame = std::move(x.m_target_frame);
    m_fixed_frame = std::move(x.m_fixed_frame);
    m_source_time = std::move(x.m_source_time);
    m_target_time = std::move(x.m_target_time);
    m_time = std::move(x.m_time);
    m_duration = std::move(x.m_duration);
    m_transform = std::move(x.m_transform);
}

TF2Request& TF2Request::operator =(
        const TF2Request& x)
{

    m_request_id = x.m_request_id;
    m_path = x.m_path;
    m_source_frame = x.m_source_frame;
    m_target_frame = x.m_target_frame;
    m_fixed_frame = x.m_fixed_frame;
    m_source_time = x.m_source_time;
    m_target_time = x.m_target_time;
    m_time = x.m_time;
    m_duration = x.m_duration;
    m_transform = x.m_transform;

    return *this;
}

TF2Request& TF2Request::operator =(
        TF2Request&& x)
{

    m_request_id = std::move(x.m_request_id);
    m_path = std::move(x.m_path);
    m_source_frame = std::move(x.m_source_frame);
    m_target_frame = std::move(x.m_target_frame);
    m_fixed_frame = std::move(x.m_fixed_frame);
    m_source_time = std::move(x.m_source_time);
    m_target_time = std::move(x.m_target_time);
    m_time = std::move(x.m_time);
    m_duration = std::move(x.m_duration);
    m_transform = std::move(x.m_transform);

    return *this;
}

size_t TF2Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += TF2RequestTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += TF2RequestTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += TF2RequestTime::getMaxCdrSerializedSize(current_alignment);
    current_alignment += TF2RequestDuration::getMaxCdrSerializedSize(current_alignment);
    current_alignment += TF2Transform::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t TF2Request::getCdrSerializedSize(
        const TF2Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.request_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.path().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.source_frame().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.target_frame().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fixed_frame().size() + 1;

    current_alignment += TF2RequestTime::getCdrSerializedSize(data.source_time(), current_alignment);
    current_alignment += TF2RequestTime::getCdrSerializedSize(data.target_time(), current_alignment);
    current_alignment += TF2RequestTime::getCdrSerializedSize(data.time(), current_alignment);
    current_alignment += TF2RequestDuration::getCdrSerializedSize(data.duration(), current_alignment);
    current_alignment += TF2Transform::getCdrSerializedSize(data.transform(), current_alignment);

    return current_alignment - initial_alignment;
}

void TF2Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_request_id;
    scdr << m_path;
    scdr << m_source_frame;
    scdr << m_target_frame;
    scdr << m_fixed_frame;
    scdr << m_source_time;
    scdr << m_target_time;
    scdr << m_time;
    scdr << m_duration;
    scdr << m_transform;

}

void TF2Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_request_id;
    dcdr >> m_path;
    dcdr >> m_source_frame;
    dcdr >> m_target_frame;
    dcdr >> m_fixed_frame;
    dcdr >> m_source_time;
    dcdr >> m_target_time;
    dcdr >> m_time;
    dcdr >> m_duration;
    dcdr >> m_transform;
}

/*!
 * @brief This function copies the value in member request_id
 * @param _request_id New value to be copied in member request_id
 */
void TF2Request::request_id(
        const std::string& _request_id)
{
    m_request_id = _request_id;
}

/*!
 * @brief This function moves the value in member request_id
 * @param _request_id New value to be moved in member request_id
 */
void TF2Request::request_id(
        std::string&& _request_id)
{
    m_request_id = std::move(_request_id);
}

/*!
 * @brief This function returns a constant reference to member request_id
 * @return Constant reference to member request_id
 */
const std::string& TF2Request::request_id() const
{
    return m_request_id;
}

/*!
 * @brief This function returns a reference to member request_id
 * @return Reference to member request_id
 */
std::string& TF2Request::request_id()
{
    return m_request_id;
}
/*!
 * @brief This function copies the value in member path
 * @param _path New value to be copied in member path
 */
void TF2Request::path(
        const std::string& _path)
{
    m_path = _path;
}

/*!
 * @brief This function moves the value in member path
 * @param _path New value to be moved in member path
 */
void TF2Request::path(
        std::string&& _path)
{
    m_path = std::move(_path);
}

/*!
 * @brief This function returns a constant reference to member path
 * @return Constant reference to member path
 */
const std::string& TF2Request::path() const
{
    return m_path;
}

/*!
 * @brief This function returns a reference to member path
 * @return Reference to member path
 */
std::string& TF2Request::path()
{
    return m_path;
}
/*!
 * @brief This function copies the value in member source_frame
 * @param _source_frame New value to be copied in member source_frame
 */
void TF2Request::source_frame(
        const std::string& _source_frame)
{
    m_source_frame = _source_frame;
}

/*!
 * @brief This function moves the value in member source_frame
 * @param _source_frame New value to be moved in member source_frame
 */
void TF2Request::source_frame(
        std::string&& _source_frame)
{
    m_source_frame = std::move(_source_frame);
}

/*!
 * @brief This function returns a constant reference to member source_frame
 * @return Constant reference to member source_frame
 */
const std::string& TF2Request::source_frame() const
{
    return m_source_frame;
}

/*!
 * @brief This function returns a reference to member source_frame
 * @return Reference to member source_frame
 */
std::string& TF2Request::source_frame()
{
    return m_source_frame;
}
/*!
 * @brief This function copies the value in member target_frame
 * @param _target_frame New value to be copied in member target_frame
 */
void TF2Request::target_frame(
        const std::string& _target_frame)
{
    m_target_frame = _target_frame;
}

/*!
 * @brief This function moves the value in member target_frame
 * @param _target_frame New value to be moved in member target_frame
 */
void TF2Request::target_frame(
        std::string&& _target_frame)
{
    m_target_frame = std::move(_target_frame);
}

/*!
 * @brief This function returns a constant reference to member target_frame
 * @return Constant reference to member target_frame
 */
const std::string& TF2Request::target_frame() const
{
    return m_target_frame;
}

/*!
 * @brief This function returns a reference to member target_frame
 * @return Reference to member target_frame
 */
std::string& TF2Request::target_frame()
{
    return m_target_frame;
}
/*!
 * @brief This function copies the value in member fixed_frame
 * @param _fixed_frame New value to be copied in member fixed_frame
 */
void TF2Request::fixed_frame(
        const std::string& _fixed_frame)
{
    m_fixed_frame = _fixed_frame;
}

/*!
 * @brief This function moves the value in member fixed_frame
 * @param _fixed_frame New value to be moved in member fixed_frame
 */
void TF2Request::fixed_frame(
        std::string&& _fixed_frame)
{
    m_fixed_frame = std::move(_fixed_frame);
}

/*!
 * @brief This function returns a constant reference to member fixed_frame
 * @return Constant reference to member fixed_frame
 */
const std::string& TF2Request::fixed_frame() const
{
    return m_fixed_frame;
}

/*!
 * @brief This function returns a reference to member fixed_frame
 * @return Reference to member fixed_frame
 */
std::string& TF2Request::fixed_frame()
{
    return m_fixed_frame;
}
/*!
 * @brief This function copies the value in member source_time
 * @param _source_time New value to be copied in member source_time
 */
void TF2Request::source_time(
        const TF2RequestTime& _source_time)
{
    m_source_time = _source_time;
}

/*!
 * @brief This function moves the value in member source_time
 * @param _source_time New value to be moved in member source_time
 */
void TF2Request::source_time(
        TF2RequestTime&& _source_time)
{
    m_source_time = std::move(_source_time);
}

/*!
 * @brief This function returns a constant reference to member source_time
 * @return Constant reference to member source_time
 */
const TF2RequestTime& TF2Request::source_time() const
{
    return m_source_time;
}

/*!
 * @brief This function returns a reference to member source_time
 * @return Reference to member source_time
 */
TF2RequestTime& TF2Request::source_time()
{
    return m_source_time;
}
/*!
 * @brief This function copies the value in member target_time
 * @param _target_time New value to be copied in member target_time
 */
void TF2Request::target_time(
        const TF2RequestTime& _target_time)
{
    m_target_time = _target_time;
}

/*!
 * @brief This function moves the value in member target_time
 * @param _target_time New value to be moved in member target_time
 */
void TF2Request::target_time(
        TF2RequestTime&& _target_time)
{
    m_target_time = std::move(_target_time);
}

/*!
 * @brief This function returns a constant reference to member target_time
 * @return Constant reference to member target_time
 */
const TF2RequestTime& TF2Request::target_time() const
{
    return m_target_time;
}

/*!
 * @brief This function returns a reference to member target_time
 * @return Reference to member target_time
 */
TF2RequestTime& TF2Request::target_time()
{
    return m_target_time;
}
/*!
 * @brief This function copies the value in member time
 * @param _time New value to be copied in member time
 */
void TF2Request::time(
        const TF2RequestTime& _time)
{
    m_time = _time;
}

/*!
 * @brief This function moves the value in member time
 * @param _time New value to be moved in member time
 */
void TF2Request::time(
        TF2RequestTime&& _time)
{
    m_time = std::move(_time);
}

/*!
 * @brief This function returns a constant reference to member time
 * @return Constant reference to member time
 */
const TF2RequestTime& TF2Request::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
TF2RequestTime& TF2Request::time()
{
    return m_time;
}
/*!
 * @brief This function copies the value in member duration
 * @param _duration New value to be copied in member duration
 */
void TF2Request::duration(
        const TF2RequestDuration& _duration)
{
    m_duration = _duration;
}

/*!
 * @brief This function moves the value in member duration
 * @param _duration New value to be moved in member duration
 */
void TF2Request::duration(
        TF2RequestDuration&& _duration)
{
    m_duration = std::move(_duration);
}

/*!
 * @brief This function returns a constant reference to member duration
 * @return Constant reference to member duration
 */
const TF2RequestDuration& TF2Request::duration() const
{
    return m_duration;
}

/*!
 * @brief This function returns a reference to member duration
 * @return Reference to member duration
 */
TF2RequestDuration& TF2Request::duration()
{
    return m_duration;
}
/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void TF2Request::transform(
        const TF2Transform& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void TF2Request::transform(
        TF2Transform&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const TF2Transform& TF2Request::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
TF2Transform& TF2Request::transform()
{
    return m_transform;
}

size_t TF2Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TF2Request::isKeyDefined()
{
    return false;
}

void TF2Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
              
}

TF2Response::TF2Response()
{
    // m_response_id com.eprosima.idl.parser.typecode.StringTypeCode@5cee5251
    m_response_id ="";
    // m_result com.eprosima.idl.parser.typecode.PrimitiveTypeCode@433d61fb
    m_result = false;
    // m_transform com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3cc2931c

    // m_error_msg com.eprosima.idl.parser.typecode.StringTypeCode@5c909414
    m_error_msg ="";

}

TF2Response::~TF2Response()
{



}

TF2Response::TF2Response(
        const TF2Response& x)
{
    m_response_id = x.m_response_id;
    m_result = x.m_result;
    m_transform = x.m_transform;
    m_error_msg = x.m_error_msg;
}

TF2Response::TF2Response(
        TF2Response&& x)
{
    m_response_id = std::move(x.m_response_id);
    m_result = x.m_result;
    m_transform = std::move(x.m_transform);
    m_error_msg = std::move(x.m_error_msg);
}

TF2Response& TF2Response::operator =(
        const TF2Response& x)
{

    m_response_id = x.m_response_id;
    m_result = x.m_result;
    m_transform = x.m_transform;
    m_error_msg = x.m_error_msg;

    return *this;
}

TF2Response& TF2Response::operator =(
        TF2Response&& x)
{

    m_response_id = std::move(x.m_response_id);
    m_result = x.m_result;
    m_transform = std::move(x.m_transform);
    m_error_msg = std::move(x.m_error_msg);

    return *this;
}

size_t TF2Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += TF2Transform::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t TF2Response::getCdrSerializedSize(
        const TF2Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.response_id().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += TF2Transform::getCdrSerializedSize(data.transform(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.error_msg().size() + 1;


    return current_alignment - initial_alignment;
}

void TF2Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_response_id;
    scdr << m_result;
    scdr << m_transform;
    scdr << m_error_msg;

}

void TF2Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_response_id;
    dcdr >> m_result;
    dcdr >> m_transform;
    dcdr >> m_error_msg;
}

/*!
 * @brief This function copies the value in member response_id
 * @param _response_id New value to be copied in member response_id
 */
void TF2Response::response_id(
        const std::string& _response_id)
{
    m_response_id = _response_id;
}

/*!
 * @brief This function moves the value in member response_id
 * @param _response_id New value to be moved in member response_id
 */
void TF2Response::response_id(
        std::string&& _response_id)
{
    m_response_id = std::move(_response_id);
}

/*!
 * @brief This function returns a constant reference to member response_id
 * @return Constant reference to member response_id
 */
const std::string& TF2Response::response_id() const
{
    return m_response_id;
}

/*!
 * @brief This function returns a reference to member response_id
 * @return Reference to member response_id
 */
std::string& TF2Response::response_id()
{
    return m_response_id;
}
/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void TF2Response::result(
        bool _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
bool TF2Response::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
bool& TF2Response::result()
{
    return m_result;
}

/*!
 * @brief This function copies the value in member transform
 * @param _transform New value to be copied in member transform
 */
void TF2Response::transform(
        const TF2Transform& _transform)
{
    m_transform = _transform;
}

/*!
 * @brief This function moves the value in member transform
 * @param _transform New value to be moved in member transform
 */
void TF2Response::transform(
        TF2Transform&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * @brief This function returns a constant reference to member transform
 * @return Constant reference to member transform
 */
const TF2Transform& TF2Response::transform() const
{
    return m_transform;
}

/*!
 * @brief This function returns a reference to member transform
 * @return Reference to member transform
 */
TF2Transform& TF2Response::transform()
{
    return m_transform;
}
/*!
 * @brief This function copies the value in member error_msg
 * @param _error_msg New value to be copied in member error_msg
 */
void TF2Response::error_msg(
        const std::string& _error_msg)
{
    m_error_msg = _error_msg;
}

/*!
 * @brief This function moves the value in member error_msg
 * @param _error_msg New value to be moved in member error_msg
 */
void TF2Response::error_msg(
        std::string&& _error_msg)
{
    m_error_msg = std::move(_error_msg);
}

/*!
 * @brief This function returns a constant reference to member error_msg
 * @return Constant reference to member error_msg
 */
const std::string& TF2Response::error_msg() const
{
    return m_error_msg;
}

/*!
 * @brief This function returns a reference to member error_msg
 * @return Reference to member error_msg
 */
std::string& TF2Response::error_msg()
{
    return m_error_msg;
}

size_t TF2Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TF2Response::isKeyDefined()
{
    return false;
}

void TF2Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
